# generated by datamodel-codegen:
#   filename:  swagger.yaml
#   timestamp: 2025-08-03T23:56:33+00:00

from __future__ import annotations

from datetime import date as date_aliased
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, EmailStr, Field, RootModel


class AutocompleteAccount(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(
        ...,
        description='Name of the account found by an auto-complete search.',
        examples=['Checking Account'],
    )
    name_with_balance: str = Field(
        ...,
        description="Asset accounts and liabilities have a second field with the given date's account balance in the account currency or native currency.",
        examples=['Checking Account ($123.45)'],
    )
    type: str = Field(
        ...,
        description='Account type of the account found by the auto-complete search.',
        examples=['Asset account'],
    )
    currency_id: str = Field(
        ...,
        description='ID for the currency used by this account. If the user prefers amounts converted to their native currency, this native currency is used instead.',
        examples=['12'],
    )
    currency_name: str = Field(
        ...,
        description='Currency name for the currency used by this account. If the user prefers amounts converted to their native currency, this native currency is used instead.',
        examples=['Euro'],
    )
    currency_code: str = Field(
        ...,
        description='Currency code for the currency used by this account. If the user prefers amounts converted to their native currency, this native currency is used instead.',
        examples=['EUR'],
    )
    currency_symbol: str = Field(
        ...,
        description='Currency symbol for the currency used by this account. If the user prefers amounts converted to their native currency, this native currency is used instead.',
        examples=['$'],
    )
    currency_decimal_places: int = Field(
        ...,
        description='Number of decimal places for the currency used by this account. If the user prefers amounts converted to their native currency, this native currency is used instead.',
        examples=[2],
    )
    account_currency_id: Optional[str] = Field(
        None,
        description='ID for the currency used by this account. Even if "convertToNative" is on, the account currency ID is displayed here.',
        examples=['2'],
    )
    account_currency_name: Optional[str] = Field(
        None,
        description='Name for the currency used by this account. Even if "convertToNative" is on, the account currency name is displayed here.',
        examples=['US Dollar'],
    )
    account_currency_code: Optional[str] = Field(
        None,
        description='Code for the currency used by this account. Even if "convertToNative" is on, the account currency code is displayed here.',
        examples=['USD'],
    )
    account_currency_symbol: Optional[str] = Field(
        None,
        description='Code for the currency used by this account. Even if "convertToNative" is on, the account currency code is displayed here.',
        examples=['$'],
    )
    account_currency_decimal_places: Optional[int] = Field(
        None,
        description='Number of decimal places for the currency used by this account. Even if "convertToNative" is on, the account currency code is displayed here.',
        examples=[2],
    )


class AutocompleteBill(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(
        ...,
        description='Name of the bill found by an auto-complete search.',
        examples=['Yearly bill'],
    )
    active: Optional[bool] = Field(
        None, description='Is the bill active or not?', examples=[True]
    )


class AutocompleteBudget(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(
        ...,
        description='Name of the budget found by an auto-complete search.',
        examples=['Groceries'],
    )


class AutocompleteCategory(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(
        ...,
        description='Name of the category found by an auto-complete search.',
        examples=['Category X'],
    )


class AutocompleteCurrency(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(..., description='Currency name.', examples=['Currency name'])
    code: str = Field(..., description='Currency code.', examples=['EUR'])
    symbol: str = Field(..., examples=['$'])
    decimal_places: int = Field(..., examples=[2])


class AutocompleteCurrencyCode(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(
        ...,
        description='Currency name with the code between brackets.',
        examples=['Currency name (XCN)'],
    )
    code: str = Field(..., description='Currency code.', examples=['EUR'])
    symbol: str = Field(..., examples=['$'])
    decimal_places: int = Field(..., examples=[2])


class AutocompleteObjectGroup(BaseModel):
    id: str = Field(..., examples=['2'])
    title: str = Field(
        ...,
        description='Title of the object group found by an auto-complete search.',
        examples=['Object Group one'],
    )
    name: str = Field(
        ...,
        description='Title of the object group found by an auto-complete search.',
        examples=['Object Group one'],
    )


class AutocompletePiggy(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(
        ...,
        description='Name of the piggy bank found by an auto-complete search.',
        examples=['New couch'],
    )
    currency_id: Optional[str] = Field(
        None,
        description="Currency ID for this piggy bank. This will always be the currency of the piggy bank, never the user's native currency.",
        examples=['12'],
    )
    currency_code: Optional[str] = Field(
        None,
        description="Currency code for this piggy bank. This will always be the currency of the piggy bank, never the user's native currency.",
        examples=['EUR'],
    )
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_name: Optional[str] = Field(
        None,
        description="Currency name for the currency used by this piggy bank. This will always be the currency of the piggy bank, never the user's native currency.",
        examples=['Euro'],
    )
    currency_decimal_places: Optional[int] = Field(
        None,
        description="Number of decimal places for the currency used by this piggy bank. This will always be the currency of the piggy bank, never the user's native currency.",
        examples=[2],
    )
    object_group_id: Optional[str] = Field(
        None,
        description='The group ID of the group this object is part of. NULL if no group.',
        examples=['5'],
    )
    object_group_title: Optional[str] = Field(
        None,
        description='The name of the group. NULL if no group.',
        examples=['Example Group'],
    )


class AutocompletePiggyBalance(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(
        ...,
        description='Name of the piggy bank found by an auto-complete search.',
        examples=['New couch'],
    )
    name_with_balance: Optional[str] = Field(
        None,
        description='Name of the piggy bank found by an auto-complete search, including the currently saved amount and the target amount.',
        examples=['New couch ($234.56 / $600)'],
    )
    currency_id: Optional[str] = Field(
        None,
        description="Currency ID for the currency used by this piggy bank. This will always be the piggy bank's currency, never the native currency.",
        examples=['12'],
    )
    currency_code: Optional[str] = Field(
        None,
        description="Currency code for the currency used by this piggy bank. This will always be the piggy bank's currency, never the native currency.",
        examples=['EUR'],
    )
    currency_symbol: Optional[str] = Field(
        None,
        description="Currency symbol for the currency used by this piggy bank. This will always be the piggy bank's currency, never the native currency.",
        examples=['$'],
    )
    currency_decimal_places: Optional[int] = Field(
        None,
        description="Currency decimal places for the currency used by this piggy bank. This will always be the piggy bank's currency, never the native currency.",
        examples=[2],
    )
    object_group_id: Optional[str] = Field(
        None,
        description='The group ID of the group this object is part of. NULL if no group.',
        examples=['5'],
    )
    object_group_title: Optional[str] = Field(
        None,
        description='The name of the group. NULL if no group.',
        examples=['Example Group'],
    )


class AutocompleteRecurrence(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(
        ...,
        description='Name of the recurrence found by an auto-complete search.',
        examples=['Yearly bill'],
    )
    description: Optional[str] = Field(
        None,
        description='Description of the recurrence found by auto-complete.',
        examples=['Should trigger daily.'],
    )


class AutocompleteRule(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(
        ...,
        description='Name of the rule found by an auto-complete search.',
        examples=['Rule one'],
    )
    description: Optional[str] = Field(
        None,
        description='Description of the rule found by auto-complete.',
        examples=['Useful rule.'],
    )


class AutocompleteRuleGroup(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(
        ...,
        description='Name of the rule group found by an auto-complete search.',
        examples=['Rule group one'],
    )
    description: Optional[str] = Field(
        None,
        description='Description of the rule group found by auto-complete.',
        examples=['Some rule group.'],
    )


class AutocompleteTag(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(
        ...,
        description='Name of the tag found by an auto-complete search.',
        examples=['too-expensive-tag-example'],
    )
    tag: str = Field(
        ...,
        description='Name of the tag found by an auto-complete search.',
        examples=['too-expensive-tag-example'],
    )


class AutocompleteTransaction(BaseModel):
    id: str = Field(
        ...,
        description='The ID of a transaction journal (basically a single split).',
        examples=['2'],
    )
    transaction_group_id: Optional[str] = Field(
        None, description='The ID of the underlying transaction group.', examples=['2']
    )
    name: str = Field(
        ..., description='Transaction description', examples=['Transaction']
    )
    description: str = Field(
        ..., description='Transaction description', examples=['Transaction']
    )


class AutocompleteTransactionID(BaseModel):
    id: str = Field(
        ...,
        description='The ID of a transaction journal (basically a single split).',
        examples=['2'],
    )
    transaction_group_id: Optional[str] = Field(
        None, description='The ID of the underlying transaction group.', examples=['2']
    )
    name: str = Field(
        ...,
        description='Transaction description with ID in the name.',
        examples=['#12: Transaction'],
    )
    description: str = Field(
        ...,
        description='Transaction description with ID in the name.',
        examples=['#12: Transaction'],
    )


class AutocompleteTransactionType(BaseModel):
    id: str = Field(..., examples=['2'])
    name: str = Field(
        ...,
        description='Type of the object found by an auto-complete search.',
        examples=['Withdrawal'],
    )
    type: str = Field(
        ...,
        description='Name of the object found by an auto-complete search.',
        examples=['Withdrawal'],
    )


class ChartDataPoint(BaseModel):
    key: Optional[str] = Field(
        None,
        description="The key is the label of the value, so for example: '2018-01-01' => 13 or 'Groceries' => -123.",
        examples=['value'],
    )


class Entries(BaseModel):
    pass


class ChartDataSet(BaseModel):
    label: Optional[str] = Field(
        None,
        description='This is the title of the current set. It can refer to an account, a budget or another object (by name).',
        examples=['Checking account'],
    )
    currency_id: Optional[str] = Field(
        None,
        description='The currency ID of the currency associated to the data in the entries. This may be the native currency of administration.',
        examples=['5'],
    )
    currency_code: Optional[str] = Field(None, examples=['EUR'])
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_decimal_places: Optional[int] = Field(
        None,
        description='Number of decimals for the currency associated to the data in the entries.',
        examples=[2],
    )
    start_date: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    end_date: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    type: Optional[str] = Field(
        None,
        description='Indicated the type of chart that is expected to be rendered. You can safely ignore this if you want.',
        examples=['line'],
    )
    yAxisID: Optional[int] = Field(
        None,
        description='Used to indicate the Y axis for this data set. Is usually between 0 and 1 (left and right side of the chart).',
        examples=[0],
    )
    entries: Optional[Union[List[ChartDataPoint], Entries]] = Field(
        None,
        description="The actual entries for this data set. They 'key' value is the label for the data point. The value is the actual (numerical) value.",
    )


class ChartLine(RootModel[List[ChartDataSet]]):
    root: List[ChartDataSet]


class DataDestroyObject(Enum):
    not_assets_liabilities = 'not_assets_liabilities'
    budgets = 'budgets'
    bills = 'bills'
    piggy_banks = 'piggy_banks'
    rules = 'rules'
    recurring = 'recurring'
    categories = 'categories'
    tags = 'tags'
    object_groups = 'object_groups'
    accounts = 'accounts'
    asset_accounts = 'asset_accounts'
    expense_accounts = 'expense_accounts'
    revenue_accounts = 'revenue_accounts'
    liabilities = 'liabilities'
    transactions = 'transactions'
    withdrawals = 'withdrawals'
    deposits = 'deposits'
    transfers = 'transfers'


class AccountSearchFieldFilter(Enum):
    all = 'all'
    iban = 'iban'
    name = 'name'
    number = 'number'
    id = 'id'


class ConfigValueFilter(Enum):
    configuration_is_demo_site = 'configuration.is_demo_site'
    configuration_permission_update_check = 'configuration.permission_update_check'
    configuration_last_update_check = 'configuration.last_update_check'
    configuration_single_user_mode = 'configuration.single_user_mode'
    firefly_version = 'firefly.version'
    firefly_default_location = 'firefly.default_location'
    firefly_account_to_transaction = 'firefly.account_to_transaction'
    firefly_allowed_opposing_types = 'firefly.allowed_opposing_types'
    firefly_accountRoles = 'firefly.accountRoles'
    firefly_valid_liabilities = 'firefly.valid_liabilities'
    firefly_interest_periods = 'firefly.interest_periods'
    firefly_enable_external_map = 'firefly.enable_external_map'
    firefly_expected_source_types = 'firefly.expected_source_types'
    app_timezone = 'app.timezone'
    firefly_bill_periods = 'firefly.bill_periods'
    firefly_credit_card_types = 'firefly.credit_card_types'
    firefly_languages = 'firefly.languages'
    firefly_valid_view_ranges = 'firefly.valid_view_ranges'


class ConfigValueUpdateFilter(Enum):
    configuration_is_demo_site = 'configuration.is_demo_site'
    configuration_permission_update_check = 'configuration.permission_update_check'
    configuration_last_update_check = 'configuration.last_update_check'
    configuration_single_user_mode = 'configuration.single_user_mode'


class ExportFileFilter(Enum):
    csv = 'csv'


class InsightGroupEntry(BaseModel):
    id: Optional[str] = Field(
        None,
        description='This ID is a reference to the original object.',
        examples=['123'],
    )
    name: Optional[str] = Field(
        None, description='This is the name of the object.', examples=['Land lord']
    )
    difference: Optional[str] = Field(
        None,
        description='The amount spent or earned between start date and end date, a number defined as a string, for this object and all asset accounts.',
        examples=['-123.45'],
    )
    difference_float: Optional[float] = Field(
        None,
        description='The amount spent or earned between start date and end date, a number as a float, for this object and all asset accounts. May have rounding errors.',
        examples=[-123.45],
    )
    currency_id: Optional[str] = Field(
        None,
        description='The currency ID of the expenses listed for this account.',
        examples=['5'],
    )
    currency_code: Optional[str] = Field(
        None,
        description='The currency code of the expenses listed for this account.',
        examples=['EUR'],
    )


class InsightTotalEntry(BaseModel):
    difference: Optional[str] = Field(
        None,
        description='The amount spent between start date and end date, defined as a string, for this expense account and all asset accounts.',
        examples=['123.45'],
    )
    difference_float: Optional[float] = Field(
        None,
        description='The amount spent between start date and end date, defined as a string, for this expense account and all asset accounts. This number is a float (double) and may have rounding errors.',
        examples=[123.45],
    )
    currency_id: Optional[str] = Field(
        None,
        description='The currency ID of the expenses listed for this expense account.',
        examples=['5'],
    )
    currency_code: Optional[str] = Field(
        None,
        description='The currency code of the expenses listed for this expense account.',
        examples=['EUR'],
    )


class InsightTransferEntry(BaseModel):
    id: Optional[str] = Field(
        None,
        description='This ID is a reference to the original object.',
        examples=['123'],
    )
    name: Optional[str] = Field(
        None, description='This is the name of the object.', examples=['Land lord']
    )
    difference: Optional[str] = Field(
        None,
        description='The total amount transferred between start date and end date, a number defined as a string, for this asset account.',
        examples=['-123.45'],
    )
    difference_float: Optional[float] = Field(
        None,
        description='The total amount transferred between start date and end date, a number as a float, for this asset account. May have rounding errors.',
        examples=[-123.45],
    )
    in_: Optional[str] = Field(
        None,
        alias='in',
        description='The total amount transferred TO this account between start date and end date, a number defined as a string, for this asset account.',
        examples=['123.45'],
    )
    in_float: Optional[float] = Field(
        None,
        description='The total amount transferred FROM this account between start date and end date, a number as a float, for this asset account. May have rounding errors.',
        examples=[123.45],
    )
    out: Optional[str] = Field(
        None,
        description='The total amount transferred FROM this account between start date and end date, a number defined as a string, for this asset account.',
        examples=['123.45'],
    )
    out_float: Optional[float] = Field(
        None,
        description='The total amount transferred TO this account between start date and end date, a number as a float, for this asset account. May have rounding errors.',
        examples=[123.45],
    )
    currency_id: Optional[str] = Field(
        None,
        description='The currency ID of the expenses listed for this account.',
        examples=['5'],
    )
    currency_code: Optional[str] = Field(
        None,
        description='The currency code of the expenses listed for this account.',
        examples=['EUR'],
    )


class AttachmentUpdate(BaseModel):
    filename: Optional[str] = Field(None, examples=['file.pdf'])
    title: Optional[str] = Field(None, examples=['Some PDF file'])
    notes: Optional[str] = Field(None, examples=['Some notes'])


class PaidDate(BaseModel):
    transaction_group_id: Optional[str] = Field(
        None, description='Transaction group ID of the paid bill.', examples=['123']
    )
    transaction_journal_id: Optional[str] = Field(
        None, description='Transaction journal ID of the paid bill.', examples=['123']
    )
    date: Optional[datetime] = Field(
        None,
        description='Date the bill was paid.',
        examples=['2018-09-17T12:46:47+01:00'],
    )


class BudgetLimit(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    start: datetime = Field(
        ...,
        description='Start date of the budget limit.',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    end: datetime = Field(
        ...,
        description='End date of the budget limit.',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    currency_id: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['5'],
    )
    currency_code: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['EUR'],
    )
    currency_name: Optional[str] = Field(None, examples=['Euro'])
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_decimal_places: Optional[int] = Field(None, examples=[2])
    native_currency_id: Optional[str] = Field(
        None, description="The administration's native currency ID.", examples=['5']
    )
    native_currency_code: Optional[str] = Field(
        None, description="The administration's native currency code.", examples=['EUR']
    )
    native_currency_symbol: Optional[str] = Field(
        None, description="The administration's native currency symbol.", examples=['$']
    )
    native_currency_decimal_places: Optional[int] = Field(
        None,
        description="The administration's native currency decimal places.",
        examples=[2],
    )
    budget_id: str = Field(
        ..., description='The budget ID of the associated budget.', examples=['23']
    )
    period: Optional[str] = Field(
        None,
        description='Period of the budget limit. Only used when auto-generated by auto-budget.',
        examples=['monthly'],
    )
    amount: str = Field(..., examples=['123.45'])
    native_amount: Optional[str] = Field(
        None,
        description="The amount of this budget limit in the user's native currency, if the original amount is in a different currency.",
        examples=['123.45'],
    )
    spent: Optional[str] = Field(
        None,
        description='Will be in the native currency if this is turned on by the user.',
        examples=['-1012.12'],
    )
    notes: Optional[str] = Field(
        None,
        description='Some notes for this specific budget limit.',
        examples=['Some example notes'],
    )


class BudgetLimitStore(BaseModel):
    currency_id: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['5'],
    )
    currency_code: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['EUR'],
    )
    budget_id: str = Field(
        ..., description='The budget ID of the associated budget.', examples=['23']
    )
    start: date_aliased = Field(
        ..., description='Start date of the budget limit.', examples=['2017-09-17']
    )
    period: Optional[str] = Field(
        None,
        description='Period of the budget limit. Only used when auto-generated by auto-budget.',
        examples=['monthly'],
    )
    end: date_aliased = Field(
        ..., description='End date of the budget limit.', examples=['2017-09-17']
    )
    amount: str = Field(..., examples=['123.45'])
    notes: Optional[str] = Field(
        None,
        description='Some notes for this specific budget limit.',
        examples=['Some example notes'],
    )


class BudgetSpent(BaseModel):
    sum: Optional[str] = Field(
        None,
        description="The amount spent. This is in the administration's native currency, if the conversion is turned on.",
        examples=['123.45'],
    )
    currency_id: Optional[str] = Field(None, examples=['5'])
    currency_code: Optional[str] = Field(None, examples=['USD'])
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_decimal_places: Optional[int] = Field(
        None, description='Number of decimals supported by the currency', examples=[2]
    )


class CategoryUpdate(BaseModel):
    name: str = Field(..., examples=['Lunch'])
    notes: Optional[str] = Field(None, examples=['Some example notes'])


class CategoryEarned(BaseModel):
    currency_id: Optional[str] = Field(None, examples=['5'])
    currency_code: Optional[str] = Field(None, examples=['USD'])
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_decimal_places: Optional[int] = Field(
        None, description='Number of decimals supported by the currency', examples=[2]
    )
    sum: Optional[str] = Field(
        None, description='The amount earned.', examples=['123.45']
    )


class CategorySpent(BaseModel):
    currency_id: Optional[str] = Field(None, examples=['5'])
    currency_code: Optional[str] = Field(None, examples=['USD'])
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_decimal_places: Optional[int] = Field(
        None, description='Number of decimals supported by the currency', examples=[2]
    )
    sum: Optional[str] = Field(
        None, description='The amount spent.', examples=['-12423.45']
    )


class CurrencyExchangeRateReadAttributes(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    from_currency_id: Optional[str] = Field(
        None,
        description='Base currency ID for this exchange rate entry.',
        examples=['12'],
    )
    from_currency_code: Optional[str] = Field(
        None,
        description='Base currency code for this exchange rate entry.',
        examples=['EUR'],
    )
    from_currency_symbol: Optional[str] = Field(
        None,
        description='Base currency symbol for this exchange rate entry.',
        examples=['$'],
    )
    from_currency_decimal_places: Optional[int] = Field(
        None,
        description='Base currency decimal places for this exchange rate entry.',
        examples=[2],
    )
    to_currency_id: Optional[str] = Field(
        None,
        description='Destination currency ID for this exchange rate entry.',
        examples=['12'],
    )
    to_currency_code: Optional[str] = Field(
        None,
        description='Destination currency code for this exchange rate entry.',
        examples=['EUR'],
    )
    to_currency_symbol: Optional[str] = Field(
        None,
        description='Destination currency symbol for this exchange rate entry.',
        examples=['$'],
    )
    to_currency_decimal_places: Optional[int] = Field(
        None,
        description='Destination currency decimal places for this exchange rate entry.',
        examples=[2],
    )
    rate: Optional[str] = Field(
        None,
        description="The actual exchange rate. How many 'to' currency will you get for 1 'from' currency?",
        examples=['1.10340'],
    )
    date: Optional[datetime] = Field(
        None,
        description='Date and time of the exchange rate.',
        examples=['2018-09-17T12:46:47+01:00'],
    )


class CurrencyExchangeRateStore(BaseModel):
    date: date_aliased = Field(
        ...,
        description='The date to which the exchange rate is applicable.',
        examples=['2018-09-17'],
    )
    rate: str = Field(
        ...,
        description='The exchange rate from the base currency to the destination currency.',
        examples=['2.3456'],
    )
    from_: str = Field(
        ..., alias='from', description='The base currency code.', examples=['USD']
    )
    to: str = Field(..., description='The destination currency code.', examples=['EUR'])


class CurrencyExchangeRateUpdate(BaseModel):
    date: date_aliased = Field(
        ...,
        description='The date to which the exchange rate is applicable.',
        examples=['2018-09-17'],
    )
    rate: str = Field(
        ...,
        description='The exchange rate from the base currency to the destination currency.',
        examples=['2.3456'],
    )


class ObjectGroup(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    title: str = Field(..., examples=['My object group'])
    order: int = Field(..., description='Order of the object group', examples=[1])


class ObjectGroupUpdate(BaseModel):
    title: str = Field(..., examples=['My object group'])
    order: Optional[int] = Field(
        None, description='Order of the object group', examples=[1]
    )


class Field0(BaseModel):
    rel: Optional[str] = Field(None, examples=['self'])
    uri: Optional[str] = Field(None, examples=['/OBJECTS/1'])


class ObjectLink(BaseModel):
    self: Optional[AnyUrl] = Field(
        None, examples=['https://demo.firefly-iii.org/api/v1/OBJECTS/1']
    )
    field_0: Optional[Field0] = Field(None, alias='0')


class PageLink(BaseModel):
    self: Optional[AnyUrl] = Field(
        None, examples=['https://demo.firefly-iii.org/api/v1/OBJECT?&page=4']
    )
    first: Optional[AnyUrl] = Field(
        None, examples=['https://demo.firefly-iii.org/api/v1/OBJECT?&page=1']
    )
    next: Optional[AnyUrl] = Field(
        None, examples=['https://demo.firefly-iii.org/api/v1/OBJECT?&page=3']
    )
    prev: Optional[AnyUrl] = Field(
        None, examples=['https://demo.firefly-iii.org/api/v1/OBJECT?&page=2']
    )
    last: Optional[AnyUrl] = Field(
        None, examples=['https://demo.firefly-iii.org/api/v1/OBJECT?&page=12']
    )


class PiggyBankAccountRead(BaseModel):
    id: str = Field(..., description='The ID of the account.', examples=['3'])
    name: str = Field(..., examples=['Checking account'])
    current_amount: str = Field(..., examples=['123.45'])
    native_current_amount: str = Field(
        ...,
        description='If convertToNative is on, this will show the amount in the native currency.',
        examples=['123.45'],
    )


class PiggyBankAccountStore(BaseModel):
    id: str = Field(..., description='The ID of the account.', examples=['3'])
    name: Optional[str] = Field(
        None, description='The name of the account.', examples=['Checking account']
    )
    current_amount: Optional[str] = Field(
        None, description='The amount saved currently.', examples=['123.45']
    )


class PiggyBankAccountUpdate(BaseModel):
    account_id: Optional[str] = Field(
        None, description='The ID of the account.', examples=['3']
    )
    name: Optional[str] = Field(
        None, description='The name of the account.', examples=['Checking account']
    )
    current_amount: Optional[str] = Field(
        None, description='The amount saved currently.', examples=['123.45']
    )


class PiggyBankStore(BaseModel):
    name: str = Field(..., examples=['New digital camera'])
    accounts: Optional[List[PiggyBankAccountStore]] = None
    target_amount: str = Field(..., examples=['123.45'])
    current_amount: Optional[str] = Field(None, examples=['123.45'])
    start_date: Optional[date_aliased] = Field(
        None,
        description='The date you started with this piggy bank.',
        examples=['2018-09-17'],
    )
    target_date: Optional[date_aliased] = Field(
        None,
        description='The date you intend to finish saving money.',
        examples=['2018-09-17'],
    )
    order: Optional[int] = Field(None, examples=[5])
    active: Optional[bool] = Field(None, examples=[True])
    notes: Optional[str] = Field(None, examples=['Some notes'])
    object_group_id: Optional[str] = Field(
        None,
        description='The group ID of the group this object is part of. NULL if no group.',
        examples=['5'],
    )
    object_group_title: Optional[str] = Field(
        None,
        description='The name of the group. NULL if no group.',
        examples=['Example Group'],
    )


class PiggyBankUpdate(BaseModel):
    name: Optional[str] = Field(None, examples=['New digital camera'])
    accounts: Optional[List[PiggyBankAccountUpdate]] = None
    currency_id: Optional[str] = Field(None, examples=['5'])
    currency_code: Optional[str] = Field(None, examples=['USD'])
    target_amount: Optional[str] = Field(None, examples=['123.45'])
    start_date: Optional[date_aliased] = Field(
        None,
        description='The date you started with this piggy bank.',
        examples=['2018-09-17'],
    )
    target_date: Optional[date_aliased] = Field(
        None,
        description='The date you intend to finish saving money.',
        examples=['2018-09-17'],
    )
    order: Optional[int] = Field(None, examples=[5])
    active: Optional[bool] = Field(None, examples=[True])
    notes: Optional[str] = Field(None, examples=['Some notes'])
    object_group_id: Optional[str] = Field(
        None,
        description='The group ID of the group this object is part of. NULL if no group.',
        examples=['5'],
    )
    object_group_title: Optional[str] = Field(
        None,
        description='The name of the group. NULL if no group.',
        examples=['Example Group'],
    )


class PiggyBankEvent(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    currency_id: Optional[str] = Field(None, examples=['5'])
    currency_code: Optional[str] = Field(None, examples=['EUR'])
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_decimal_places: Optional[int] = Field(None, examples=[2])
    amount: Optional[str] = Field(None, examples=['123.45'])
    transaction_journal_id: Optional[str] = Field(
        None, description='The journal associated with the event.', examples=['4291']
    )
    transaction_group_id: Optional[str] = Field(
        None,
        description='The transaction group associated with the event.',
        examples=['4291'],
    )


class RecurrenceTransactionStore(BaseModel):
    description: str = Field(..., examples=['Rent for the current month'])
    amount: str = Field(
        ..., description='Amount of the transaction.', examples=['123.45']
    )
    foreign_amount: Optional[str] = Field(
        None, description='Foreign amount of the transaction.', examples=['123.45']
    )
    currency_id: Optional[str] = Field(
        None,
        description='Submit either a currency_id or a currency_code.',
        examples=['3'],
    )
    currency_code: Optional[str] = Field(
        None,
        description='Submit either a currency_id or a currency_code.',
        examples=['EUR'],
    )
    foreign_currency_id: Optional[str] = Field(
        None,
        description='Submit either a foreign_currency_id or a foreign_currency_code, or neither.',
        examples=['17'],
    )
    foreign_currency_code: Optional[str] = Field(
        None,
        description='Submit either a foreign_currency_id or a foreign_currency_code, or neither.',
        examples=['GBP'],
    )
    budget_id: Optional[str] = Field(
        None, description='The budget ID for this transaction.', examples=['4']
    )
    category_id: Optional[str] = Field(
        None, description='Category ID for this transaction.', examples=['211']
    )
    source_id: str = Field(
        ..., description='ID of the source account.', examples=['913']
    )
    destination_id: str = Field(
        ..., description='ID of the destination account.', examples=['258']
    )
    tags: Optional[List[str]] = Field(
        None, description='Array of tags.', examples=[None]
    )
    piggy_bank_id: Optional[str] = Field(
        None, description='Optional.', examples=['123']
    )
    bill_id: Optional[str] = Field(None, description='Optional.', examples=['123'])


class RecurrenceTransactionUpdate(BaseModel):
    id: str = Field(
        ...,
        examples=[
            'ID of the recurring transaction. Not to be confused with the ID of the recurrence itself. Is marked as REQUIRED but can be skipped when there is only ONE transaction.'
        ],
    )
    description: Optional[str] = Field(None, examples=['Rent for the current month'])
    amount: Optional[str] = Field(
        None, description='Amount of the transaction.', examples=['123.45']
    )
    foreign_amount: Optional[str] = Field(
        None, description='Foreign amount of the transaction.', examples=['123.45']
    )
    currency_id: Optional[str] = Field(
        None,
        description='Submit either a currency_id or a currency_code.',
        examples=['3'],
    )
    currency_code: Optional[str] = Field(
        None,
        description='Submit either a currency_id or a currency_code.',
        examples=['EUR'],
    )
    foreign_currency_id: Optional[str] = Field(
        None,
        description='Submit either a foreign_currency_id or a foreign_currency_code, or neither.',
        examples=['17'],
    )
    budget_id: Optional[str] = Field(
        None, description='The budget ID for this transaction.', examples=['4']
    )
    category_id: Optional[str] = Field(
        None, description='Category ID for this transaction.', examples=['211']
    )
    source_id: Optional[str] = Field(
        None,
        description='ID of the source account. Submit either this or source_name.',
        examples=['913'],
    )
    destination_id: Optional[str] = Field(
        None,
        description='ID of the destination account. Submit either this or destination_name.',
        examples=['258'],
    )
    tags: Optional[List[str]] = Field(
        None, description='Array of tags.', examples=[None]
    )
    piggy_bank_id: Optional[str] = Field(None, examples=['123'])
    bill_id: Optional[str] = Field(None, description='Optional.', examples=['123'])


class RuleGroup(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    title: str = Field(..., examples=['Default rule group'])
    description: Optional[str] = Field(
        None, examples=['Description of this rule group']
    )
    order: Optional[int] = Field(None, examples=[4])
    active: Optional[bool] = Field(None, examples=[True])


class RuleGroupStore(BaseModel):
    title: str = Field(..., examples=['Default rule group'])
    description: Optional[str] = Field(
        None, examples=['Description of this rule group']
    )
    order: Optional[int] = Field(None, examples=[4])
    active: Optional[bool] = Field(None, examples=[True])


class RuleGroupUpdate(BaseModel):
    title: Optional[str] = Field(None, examples=['Default rule group'])
    description: Optional[str] = Field(
        None, examples=['Description of this rule group']
    )
    order: Optional[int] = Field(None, examples=[4])
    active: Optional[bool] = Field(None, examples=[True])


class TagModel(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    tag: str = Field(..., description='The tag', examples=['expensive'])
    date: Optional[date_aliased] = Field(
        None,
        description='The date to which the tag is applicable.',
        examples=['2018-09-17'],
    )
    description: Optional[str] = Field(None, examples=['Tag for expensive stuff'])
    latitude: Optional[float] = Field(
        None,
        description="Latitude of the tag's location, if applicable. Can be used to draw a map.",
        examples=[51.983333],
    )
    longitude: Optional[float] = Field(
        None,
        description="Latitude of the tag's location, if applicable. Can be used to draw a map.",
        examples=[5.916667],
    )
    zoom_level: Optional[int] = Field(
        None,
        description='Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.',
        examples=[6],
    )


class TagModelStore(BaseModel):
    tag: str = Field(..., description='The tag', examples=['expensive'])
    date: Optional[date_aliased] = Field(
        None,
        description='The date to which the tag is applicable.',
        examples=['2018-09-17'],
    )
    description: Optional[str] = Field(None, examples=['Tag for expensive stuff'])
    latitude: Optional[float] = Field(
        None,
        description="Latitude of the tag's location, if applicable. Can be used to draw a map.",
        examples=[51.983333],
    )
    longitude: Optional[float] = Field(
        None,
        description="Latitude of the tag's location, if applicable. Can be used to draw a map.",
        examples=[5.916667],
    )
    zoom_level: Optional[int] = Field(
        None,
        description='Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.',
        examples=[6],
    )


class TagModelUpdate(BaseModel):
    tag: Optional[str] = Field(None, description='The tag', examples=['expensive'])
    date: Optional[date_aliased] = Field(
        None,
        description='The date to which the tag is applicable.',
        examples=['2018-09-17'],
    )
    description: Optional[str] = Field(None, examples=['Tag for expensive stuff'])
    latitude: Optional[float] = Field(
        None,
        description="Latitude of the tag's location, if applicable. Can be used to draw a map.",
        examples=[51.983333],
    )
    longitude: Optional[float] = Field(
        None,
        description="Latitude of the tag's location, if applicable. Can be used to draw a map.",
        examples=[5.916667],
    )
    zoom_level: Optional[int] = Field(
        None,
        description='Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.',
        examples=[6],
    )


class Currency(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    enabled: Optional[bool] = Field(
        True, description='Defaults to true', examples=[True]
    )
    default: Optional[bool] = Field(
        None, description='Make this currency the native currency.', examples=[False]
    )
    native: Optional[bool] = Field(
        None, description='Make this currency the native currency.', examples=[False]
    )
    code: str = Field(..., examples=['AMS'])
    name: str = Field(..., examples=['Ankh-Morpork dollar'])
    symbol: str = Field(..., examples=['AM$'])
    decimal_places: Optional[int] = Field(
        None, description='Supports 0-16 decimals.', examples=[2]
    )


class CurrencyStore(BaseModel):
    enabled: Optional[bool] = Field(
        True, description='Defaults to true', examples=[True]
    )
    default: Optional[bool] = Field(
        None,
        description='Make this currency the default currency. You can set this value to FALSE, in which case nothing will change to the default currency. If you set it to TRUE, the current default currency will no longer be the default currency.',
        examples=[True],
    )
    code: str = Field(..., examples=['AMS'])
    name: str = Field(..., examples=['Ankh-Morpork dollar'])
    symbol: str = Field(..., examples=['AM$'])
    decimal_places: Optional[int] = Field(
        None, description='Supports 0-16 decimals.', examples=[2]
    )


class Default(Enum):
    boolean_True = True


class CurrencyUpdate(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='If the currency is enabled', examples=[True]
    )
    default: Optional[Default] = Field(
        None,
        description='If the currency must be the default for the user. You can only submit TRUE. Submitting FALSE will not drop this currency as the default currency, because then the system would be without one.',
        examples=[True],
    )
    code: Optional[str] = Field(None, description='The currency code', examples=['AMS'])
    name: Optional[str] = Field(
        None, description='The currency name', examples=['Ankh-Morpork dollar']
    )
    symbol: Optional[str] = Field(
        None, description='The currency symbol', examples=['AM$']
    )
    decimal_places: Optional[int] = Field(
        None,
        description='How many decimals to use when displaying this currency. Between 0 and 16.',
        examples=[2],
    )


class TransactionLink(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    link_type_id: str = Field(
        ...,
        description='The link type ID to use. You can also use the link_type_name field.',
        examples=['5'],
    )
    link_type_name: Optional[str] = Field(
        None,
        description='The link type name to use. You can also use the link_type_id field.',
        examples=['Is paid by'],
    )
    inward_id: str = Field(
        ...,
        description="The inward transaction transaction_journal_id for the link. This becomes the 'is paid by' transaction of the set.",
        examples=['131'],
    )
    outward_id: str = Field(
        ...,
        description="The outward transaction transaction_journal_id for the link. This becomes the 'pays for' transaction of the set.",
        examples=['131'],
    )
    notes: Optional[str] = Field(
        None, description='Optional. Some notes.', examples=['Some example notes']
    )


class TransactionLinkStore(BaseModel):
    link_type_id: str = Field(
        ...,
        description='The link type ID to use. You can also use the link_type_name field.',
        examples=['5'],
    )
    link_type_name: Optional[str] = Field(
        None,
        description='The link type name to use. You can also use the link_type_id field.',
        examples=['Is paid by'],
    )
    inward_id: str = Field(
        ...,
        description="The inward transaction transaction_journal_id for the link. This becomes the 'is paid by' transaction of the set.",
        examples=['131'],
    )
    outward_id: str = Field(
        ...,
        description="The outward transaction transaction_journal_id for the link. This becomes the 'pays for' transaction of the set.",
        examples=['131'],
    )
    notes: Optional[str] = Field(
        None, description='Optional. Some notes.', examples=['Some example notes']
    )


class TransactionLinkUpdate(BaseModel):
    link_type_id: Optional[str] = Field(
        None,
        description='The link type ID to use. Use this field OR use the link_type_name field.',
        examples=['5'],
    )
    link_type_name: Optional[str] = Field(
        None,
        description='The link type name to use. Use this field OR use the link_type_id field.',
        examples=['Is paid by'],
    )
    inward_id: Optional[str] = Field(
        None,
        description="The inward transaction transaction_journal_id for the link. This becomes the 'is paid by' transaction of the set.",
        examples=['131'],
    )
    outward_id: Optional[str] = Field(
        None,
        description="The outward transaction transaction_journal_id for the link. This becomes the 'pays for' transaction of the set.",
        examples=['131'],
    )
    notes: Optional[str] = Field(
        None,
        description='Optional. Some notes. If you submit an empty string the current notes will be removed',
        examples=['Some example notes'],
    )


class LinkType(BaseModel):
    name: str = Field(..., examples=['Paid'])
    inward: str = Field(..., examples=['is (partially) paid for by'])
    outward: str = Field(..., examples=['(partially) pays for'])
    editable: Optional[bool] = Field(None, examples=[False])


class LinkTypeUpdate(BaseModel):
    name: Optional[str] = Field(None, examples=['Paid'])
    inward: Optional[str] = Field(None, examples=['is (partially) paid for by'])
    outward: Optional[str] = Field(None, examples=['(partially) pays for'])


class UserGroupReadRole(Enum):
    owner = 'owner'
    ro = 'ro'
    mng_trx = 'mng_trx'
    mng_meta = 'mng_meta'
    read_budgets = 'read_budgets'
    read_piggies = 'read_piggies'
    read_subscriptions = 'read_subscriptions'
    read_rules = 'read_rules'
    read_recurring = 'read_recurring'
    read_webhooks = 'read_webhooks'
    read_currencies = 'read_currencies'
    mng_budgets = 'mng_budgets'
    mng_piggies = 'mng_piggies'
    mng_subscriptions = 'mng_subscriptions'
    mng_rules = 'mng_rules'
    mng_recurring = 'mng_recurring'
    mng_webhooks = 'mng_webhooks'
    mng_currencies = 'mng_currencies'
    view_reports = 'view_reports'
    view_memberships = 'view_memberships'
    full = 'full'
    owner_1 = 'owner'


class UserGroupUpdate(BaseModel):
    title: str = Field(
        ...,
        description='A descriptive title for the user group.',
        examples=['New user group title'],
    )
    native_currency_id: Optional[str] = Field(
        None,
        description="Use either native_currency_id or native_currency_code. This will set the native currency for the user group ('financial administration').",
        examples=['1'],
    )
    native_currency_code: Optional[str] = Field(
        None,
        description="Use either native_currency_id or native_currency_code. This will set the native currency for the user group ('financial administration').",
        examples=['EUR'],
    )


class WebhookAttempt(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    webhook_message_id: Optional[str] = Field(
        None,
        description='The ID of the webhook message this attempt belongs to.',
        examples=['5'],
    )
    status_code: Optional[int] = Field(
        None, description='The HTTP status code of the error, if any.', examples=[404]
    )
    logs: Optional[str] = Field(
        None,
        description='Internal log for this attempt. May contain sensitive user data.',
        examples=['Page not found'],
    )
    response: Optional[str] = Field(
        None,
        description='Webhook receiver response for this attempt, if any. May contain sensitive user data.',
        examples=['Page not found'],
    )


class WebhookMessage(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    sent: Optional[bool] = Field(
        None, description='If this message is sent yet.', examples=[False]
    )
    errored: Optional[bool] = Field(
        None, description='If this message has errored out.', examples=[False]
    )
    webhook_id: Optional[str] = Field(
        None,
        description='The ID of the webhook this message belongs to.',
        examples=['5'],
    )
    uuid: Optional[str] = Field(
        None,
        description='Long UUID string for identification of this webhook message.',
        examples=['7a344c02-5b52-46b1-90e6-a437431dcf07'],
    )
    message: Optional[str] = Field(
        None,
        description='The actual message that is sent or will be sent as JSON string.',
        examples=['{some:message}'],
    )


class AttachableType(Enum):
    Account = 'Account'
    Budget = 'Budget'
    Bill = 'Bill'
    TransactionJournal = 'TransactionJournal'
    PiggyBank = 'PiggyBank'
    Tag = 'Tag'


class AutoBudgetPeriodEnum(Enum):
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'
    quarterly = 'quarterly'
    half_year = 'half-year'
    yearly = 'yearly'


class AutoBudgetPeriod(RootModel[Optional[AutoBudgetPeriodEnum]]):
    root: Optional[AutoBudgetPeriodEnum] = Field(
        None, description='Period for the auto budget', examples=['monthly']
    )


class AutoBudgetTypeEnum(Enum):
    reset = 'reset'
    rollover = 'rollover'
    none = 'none'


class AutoBudgetType(RootModel[Optional[AutoBudgetTypeEnum]]):
    root: Optional[AutoBudgetTypeEnum] = Field(
        None,
        description='The type of auto-budget that Firefly III must create.',
        examples=['reset'],
    )


class BillRepeatFrequency(Enum):
    weekly = 'weekly'
    monthly = 'monthly'
    quarterly = 'quarterly'
    half_year = 'half-year'
    yearly = 'yearly'


class RecurrenceRepetitionType(Enum):
    daily = 'daily'
    weekly = 'weekly'
    ndom = 'ndom'
    monthly = 'monthly'
    yearly = 'yearly'


class RecurrenceTransactionType(Enum):
    withdrawal = 'withdrawal'
    transfer = 'transfer'
    deposit = 'deposit'


class RuleActionKeyword(Enum):
    user_action = 'user_action'
    set_category = 'set_category'
    clear_category = 'clear_category'
    set_budget = 'set_budget'
    clear_budget = 'clear_budget'
    add_tag = 'add_tag'
    remove_tag = 'remove_tag'
    remove_all_tags = 'remove_all_tags'
    set_description = 'set_description'
    append_description = 'append_description'
    prepend_description = 'prepend_description'
    set_source_account = 'set_source_account'
    set_destination_account = 'set_destination_account'
    set_notes = 'set_notes'
    append_notes = 'append_notes'
    prepend_notes = 'prepend_notes'
    clear_notes = 'clear_notes'
    link_to_bill = 'link_to_bill'
    convert_withdrawal = 'convert_withdrawal'
    convert_deposit = 'convert_deposit'
    convert_transfer = 'convert_transfer'
    delete_transaction = 'delete_transaction'


class RuleTriggerKeyword(Enum):
    from_account_starts = 'from_account_starts'
    from_account_ends = 'from_account_ends'
    from_account_is = 'from_account_is'
    from_account_contains = 'from_account_contains'
    to_account_starts = 'to_account_starts'
    to_account_ends = 'to_account_ends'
    to_account_is = 'to_account_is'
    to_account_contains = 'to_account_contains'
    amount_less = 'amount_less'
    amount_exactly = 'amount_exactly'
    amount_more = 'amount_more'
    description_starts = 'description_starts'
    description_ends = 'description_ends'
    description_contains = 'description_contains'
    description_is = 'description_is'
    transaction_type = 'transaction_type'
    category_is = 'category_is'
    budget_is = 'budget_is'
    tag_is = 'tag_is'
    currency_is = 'currency_is'
    has_attachments = 'has_attachments'
    has_no_category = 'has_no_category'
    has_any_category = 'has_any_category'
    has_no_budget = 'has_no_budget'
    has_any_budget = 'has_any_budget'
    has_no_tag = 'has_no_tag'
    has_any_tag = 'has_any_tag'
    notes_contains = 'notes_contains'
    notes_start = 'notes_start'
    notes_end = 'notes_end'
    notes_are = 'notes_are'
    no_notes = 'no_notes'
    any_notes = 'any_notes'
    source_account_is = 'source_account_is'
    destination_account_is = 'destination_account_is'
    source_account_starts = 'source_account_starts'


class RuleTriggerType(Enum):
    store_journal = 'store-journal'
    update_journal = 'update-journal'


class StringArrayItem(RootModel[str]):
    root: str = Field(
        ..., description='The actual preference content.', examples=['EUR']
    )


class UserBlockedCodePropertyEnum(Enum):
    email_changed = 'email_changed'


class UserBlockedCodeProperty(RootModel[Optional[UserBlockedCodePropertyEnum]]):
    root: Optional[UserBlockedCodePropertyEnum] = Field(
        None,
        description='If you say the user must be blocked, this will be the reason code.',
        examples=['email_changed'],
    )


class UserRolePropertyEnum(Enum):
    owner = 'owner'
    demo = 'demo'


class UserRoleProperty(RootModel[Optional[UserRolePropertyEnum]]):
    root: Optional[UserRolePropertyEnum] = Field(
        None,
        description='Role for the user. Can be empty or omitted.',
        examples=['owner'],
    )


class WebhookDelivery(Enum):
    JSON = 'JSON'


class WebhookResponse(Enum):
    TRANSACTIONS = 'TRANSACTIONS'
    ACCOUNTS = 'ACCOUNTS'
    NONE = 'NONE'


class WebhookTrigger(Enum):
    STORE_TRANSACTION = 'STORE_TRANSACTION'
    UPDATE_TRANSACTION = 'UPDATE_TRANSACTION'
    DESTROY_TRANSACTION = 'DESTROY_TRANSACTION'


class BasicSummaryEntry(BaseModel):
    key: Optional[str] = Field(
        None,
        description='This is a reference to the type of info shared, not influenced by translations or user preferences. The EUR value is a reference to the currency code. Possibilities are: balance-in-ABC, spent-in-ABC, earned-in-ABC, bills-paid-in-ABC, bills-unpaid-in-ABC, left-to-spend-in-ABC and net-worth-in-ABC.',
        examples=['balance-in-EUR'],
    )
    title: Optional[str] = Field(
        None,
        description='A translated title for the information shared.',
        examples=['Balance ($)'],
    )
    monetary_value: Optional[float] = Field(
        None, description='The amount as a float.', examples=[123.45]
    )
    currency_id: Optional[str] = Field(
        None, description='The currency ID of the associated currency.', examples=['5']
    )
    currency_code: Optional[str] = Field(None, examples=['EUR'])
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_decimal_places: Optional[int] = Field(
        None,
        description='Number of decimals for the associated currency.',
        examples=[2],
    )
    no_available_budgets: Optional[bool] = Field(
        None,
        description='True if there are no available budgets available.',
        examples=[False],
    )
    value_parsed: Optional[str] = Field(
        None,
        description='The amount formatted according to the users locale',
        examples=['$ 12.45'],
    )
    local_icon: Optional[str] = Field(
        None,
        description='Reference to a font-awesome icon without the fa- part.',
        examples=['balance-scale'],
    )
    sub_title: Optional[str] = Field(
        None,
        description='A short explanation of the amounts origin. Already formatted according to the locale of the user or translated, if relevant.',
        examples=['$20 + $-40'],
    )


class CronResultRow(BaseModel):
    job_fired: Optional[bool] = Field(
        None,
        description='This value tells you if this specific cron job actually fired. It may not fire. Some cron jobs\nonly fire every 24 hours, for example.\n',
        examples=[True],
    )
    job_succeeded: Optional[bool] = Field(
        None,
        description='This value tells you if this specific cron job actually did something. The job may fire but not\nchange anything.\n',
        examples=[True],
    )
    job_errored: Optional[bool] = Field(
        None,
        description='If the cron job ran into some kind of an error, this value will be true.',
        examples=[False],
    )
    message: Optional[str] = Field(
        None,
        description='If the cron job ran into some kind of an error, this value will be the error message. The success message\nif the job actually ran OK.\n',
        examples=['Cron result message'],
    )


class Data(BaseModel):
    version: Optional[str] = Field(None, examples=['5.8.0-alpha.1'])
    api_version: Optional[str] = Field(
        None, description='Same value as the version field.', examples=['5.8.0-alpha.1']
    )
    php_version: Optional[str] = Field(None, examples=['8.1.5'])
    os: Optional[str] = Field(None, examples=['Linux'])
    driver: Optional[str] = Field(None, examples=['mysql'])


class SystemInfo(BaseModel):
    data: Optional[Data] = None


class AccountTypeFilter(Enum):
    all = 'all'
    asset = 'asset'
    cash = 'cash'
    expense = 'expense'
    revenue = 'revenue'
    special = 'special'
    hidden = 'hidden'
    liability = 'liability'
    liabilities = 'liabilities'
    Default_account = 'Default account'
    Cash_account = 'Cash account'
    Asset_account = 'Asset account'
    Expense_account = 'Expense account'
    Revenue_account = 'Revenue account'
    Initial_balance_account = 'Initial balance account'
    Beneficiary_account = 'Beneficiary account'
    Import_account = 'Import account'
    Reconciliation_account = 'Reconciliation account'
    Loan = 'Loan'
    Debt = 'Debt'
    Mortgage = 'Mortgage'


class TransactionTypeFilter(Enum):
    all = 'all'
    withdrawal = 'withdrawal'
    withdrawals = 'withdrawals'
    expense = 'expense'
    deposit = 'deposit'
    deposits = 'deposits'
    income = 'income'
    transfer = 'transfer'
    transfers = 'transfers'
    opening_balance = 'opening_balance'
    reconciliation = 'reconciliation'
    special = 'special'
    specials = 'specials'
    default = 'default'


class Pagination(BaseModel):
    total: Optional[int] = Field(None, examples=[3])
    count: Optional[int] = Field(None, examples=[20])
    per_page: Optional[int] = Field(None, examples=[100])
    current_page: Optional[int] = Field(None, examples=[1])
    total_pages: Optional[int] = Field(None, examples=[1])


class Meta(BaseModel):
    pagination: Optional[Pagination] = None


class AccountRolePropertyEnum(Enum):
    defaultAsset = 'defaultAsset'
    sharedAsset = 'sharedAsset'
    savingAsset = 'savingAsset'
    ccAsset = 'ccAsset'
    cashWalletAsset = 'cashWalletAsset'


class AccountRoleProperty(RootModel[Optional[AccountRolePropertyEnum]]):
    root: Optional[AccountRolePropertyEnum] = Field(
        None,
        description='Is only mandatory when the type is asset.',
        examples=['defaultAsset'],
    )


class AccountTypeProperty(Enum):
    Default_account = 'Default account'
    Cash_account = 'Cash account'
    Asset_account = 'Asset account'
    Expense_account = 'Expense account'
    Revenue_account = 'Revenue account'
    Initial_balance_account = 'Initial balance account'
    Beneficiary_account = 'Beneficiary account'
    Import_account = 'Import account'
    Reconciliation_account = 'Reconciliation account'
    Loan = 'Loan'
    Debt = 'Debt'
    Mortgage = 'Mortgage'


class CreditCardTypePropertyEnum(Enum):
    monthlyFull = 'monthlyFull'


class CreditCardTypeProperty(RootModel[Optional[CreditCardTypePropertyEnum]]):
    root: Optional[CreditCardTypePropertyEnum] = Field(
        None,
        description='Mandatory when the account_role is ccAsset. Can only be monthlyFull or null.',
        examples=['monthlyFull'],
    )


class InterestPeriodPropertyEnum(Enum):
    weekly = 'weekly'
    monthly = 'monthly'
    quarterly = 'quarterly'
    half_year = 'half-year'
    yearly = 'yearly'


class InterestPeriodProperty(RootModel[Optional[InterestPeriodPropertyEnum]]):
    root: Optional[InterestPeriodPropertyEnum] = Field(
        None,
        description='Mandatory when type is liability. Period over which the interest is calculated.',
        examples=['monthly'],
    )


class LiabilityDirectionPropertyEnum(Enum):
    credit = 'credit'
    debit = 'debit'


class LiabilityDirectionProperty(RootModel[Optional[LiabilityDirectionPropertyEnum]]):
    root: Optional[LiabilityDirectionPropertyEnum] = Field(
        None,
        description="'credit' indicates somebody owes you the liability. 'debit' Indicates you owe this debt yourself. Works only for liabiltiies.",
        examples=['credit'],
    )


class LiabilityTypePropertyEnum(Enum):
    loan = 'loan'
    debt = 'debt'
    mortgage = 'mortgage'


class LiabilityTypeProperty(RootModel[Optional[LiabilityTypePropertyEnum]]):
    root: Optional[LiabilityTypePropertyEnum] = Field(
        None,
        description='Mandatory when type is liability. Specifies the exact type.',
        examples=['loan'],
    )


class ShortAccountTypeProperty(Enum):
    asset = 'asset'
    expense = 'expense'
    import_ = 'import'
    revenue = 'revenue'
    cash = 'cash'
    liability = 'liability'
    liabilities = 'liabilities'
    initial_balance = 'initial-balance'
    reconciliation = 'reconciliation'


class TransactionTypeProperty(Enum):
    withdrawal = 'withdrawal'
    deposit = 'deposit'
    transfer = 'transfer'
    reconciliation = 'reconciliation'
    opening_balance = 'opening balance'


class BadRequestResponse(BaseModel):
    message: Optional[str] = Field(None, examples=['Bad Request'])
    exception: Optional[str] = Field(None, examples=['BadRequestHttpException'])


class InternalExceptionResponse(BaseModel):
    message: Optional[str] = Field(None, examples=['Internal Exception'])
    exception: Optional[str] = Field(None, examples=['InternalException'])


class NotFoundResponse(BaseModel):
    message: Optional[str] = Field(None, examples=['Resource not found'])
    exception: Optional[str] = Field(None, examples=['NotFoundHttpException'])


class UnauthenticatedResponse(BaseModel):
    message: Optional[str] = Field(None, examples=['Unauthenticated'])
    exception: Optional[str] = Field(None, examples=['AuthenticationException'])


class Errors(BaseModel):
    email: Optional[List[str]] = None
    force: Optional[List[str]] = None
    blocked: Optional[List[str]] = None
    field: Optional[List[str]] = None
    role: Optional[List[str]] = None
    blocked_code: Optional[List[str]] = None
    name: Optional[List[str]] = None
    type: Optional[List[str]] = None
    iban: Optional[List[str]] = None
    start: Optional[List[str]] = None
    end: Optional[List[str]] = None
    date: Optional[List[str]] = None


class ValidationErrorResponse(BaseModel):
    message: Optional[str] = Field(None, examples=['The given data was invalid.'])
    errors: Optional[Errors] = None


class AutocompleteAccountArray(RootModel[List[AutocompleteAccount]]):
    root: List[AutocompleteAccount]


class AutocompleteBillArray(RootModel[List[AutocompleteBill]]):
    root: List[AutocompleteBill]


class AutocompleteBudgetArray(RootModel[List[AutocompleteBudget]]):
    root: List[AutocompleteBudget]


class AutocompleteCategoryArray(RootModel[List[AutocompleteCategory]]):
    root: List[AutocompleteCategory]


class AutocompleteCurrencyArray(RootModel[List[AutocompleteCurrency]]):
    root: List[AutocompleteCurrency]


class AutocompleteCurrencyCodeArray(RootModel[List[AutocompleteCurrencyCode]]):
    root: List[AutocompleteCurrencyCode]


class AutocompleteObjectGroupArray(RootModel[List[AutocompleteObjectGroup]]):
    root: List[AutocompleteObjectGroup]


class AutocompletePiggyArray(RootModel[List[AutocompletePiggy]]):
    root: List[AutocompletePiggy]


class AutocompletePiggyBalanceArray(RootModel[List[AutocompletePiggyBalance]]):
    root: List[AutocompletePiggyBalance]


class AutocompleteRecurrenceArray(RootModel[List[AutocompleteRecurrence]]):
    root: List[AutocompleteRecurrence]


class AutocompleteRuleArray(RootModel[List[AutocompleteRule]]):
    root: List[AutocompleteRule]


class AutocompleteRuleGroupArray(RootModel[List[AutocompleteRuleGroup]]):
    root: List[AutocompleteRuleGroup]


class AutocompleteTagArray(RootModel[List[AutocompleteTag]]):
    root: List[AutocompleteTag]


class AutocompleteTransactionArray(RootModel[List[AutocompleteTransaction]]):
    root: List[AutocompleteTransaction]


class AutocompleteTransactionIDArray(RootModel[List[AutocompleteTransactionID]]):
    root: List[AutocompleteTransactionID]


class AutocompleteTransactionTypeArray(RootModel[List[AutocompleteTransactionType]]):
    root: List[AutocompleteTransactionType]


class InsightGroup(RootModel[List[InsightGroupEntry]]):
    root: List[InsightGroupEntry]


class InsightTotal(RootModel[List[InsightTotalEntry]]):
    root: List[InsightTotalEntry]


class InsightTransfer(RootModel[List[InsightTransferEntry]]):
    root: List[InsightTransferEntry]


class BudgetLimitRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['budget_limits'])
    id: str = Field(..., examples=['2'])
    attributes: BudgetLimit


class BudgetLimitSingle(BaseModel):
    data: BudgetLimitRead


class CurrencyRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['currencies'])
    id: str = Field(..., examples=['2'])
    attributes: Currency


class CurrencySingle(BaseModel):
    data: CurrencyRead


class LinkTypeRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['link_types'])
    id: str = Field(..., examples=['2'])
    attributes: LinkType
    links: ObjectLink


class LinkTypeSingle(BaseModel):
    data: LinkTypeRead


class ObjectGroupRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['object_groups'])
    id: str = Field(..., examples=['2'])
    attributes: ObjectGroup


class ObjectGroupSingle(BaseModel):
    data: ObjectGroupRead


class PiggyBankEventRead(BaseModel):
    type: str = Field(
        ..., description='Immutable value', examples=['piggy_bank_events']
    )
    id: str = Field(..., examples=['2'])
    attributes: PiggyBankEvent
    links: ObjectLink


class RuleGroupRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['rules_group'])
    id: str = Field(..., examples=['2'])
    attributes: RuleGroup
    links: ObjectLink


class RuleGroupSingle(BaseModel):
    data: RuleGroupRead


class TagRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['tags'])
    id: str = Field(..., examples=['2'])
    attributes: TagModel
    links: ObjectLink


class TagSingle(BaseModel):
    data: TagRead


class TransactionLinkRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['transactionLinks'])
    id: str = Field(..., examples=['2'])
    attributes: TransactionLink
    links: ObjectLink


class TransactionLinkSingle(BaseModel):
    data: TransactionLinkRead


class WebhookAttemptRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['webhook_attempts'])
    id: str = Field(..., examples=['2'])
    attributes: WebhookAttempt


class WebhookAttemptSingle(BaseModel):
    data: WebhookAttemptRead


class WebhookMessageRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['webhook_messages'])
    id: str = Field(..., examples=['2'])
    attributes: WebhookMessage


class WebhookMessageSingle(BaseModel):
    data: WebhookMessageRead


class Account(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    active: Optional[bool] = Field(
        True, description='If omitted, defaults to true.', examples=[False]
    )
    order: Optional[int] = Field(
        None,
        description='Order of the account. Is NULL if account is not asset or liability.',
        examples=[1],
    )
    name: str = Field(..., examples=['My checking account'])
    type: ShortAccountTypeProperty
    account_role: Optional[AccountRoleProperty] = None
    currency_id: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['12'],
    )
    currency_code: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['EUR'],
    )
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_decimal_places: Optional[int] = Field(None, examples=[2])
    native_currency_id: Optional[str] = Field(
        None,
        description='Returns the native currency ID of the administration.',
        examples=['12'],
    )
    native_currency_code: Optional[str] = Field(
        None,
        description='Returns the native currency code of the administration.',
        examples=['EUR'],
    )
    native_currency_symbol: Optional[str] = Field(
        None,
        description='Returns the native currency symbol of the administration.',
        examples=['$'],
    )
    native_currency_decimal_places: Optional[int] = Field(
        None,
        description='Returns the native currency decimal places of the administration.',
        examples=[2],
    )
    current_balance: Optional[str] = Field(
        None,
        description="The current balance of the account in the account's currency OR the native currency if the account has no currency.",
        examples=['123.45'],
    )
    native_current_balance: Optional[str] = Field(
        None,
        description="The current balance of the account in the administration's native currency.",
        examples=['123.45'],
    )
    current_balance_date: Optional[datetime] = Field(
        None,
        description="The timestamp for this date is always 23:59:59, to indicate it's the balance at the very END of that particular day.",
        examples=['2018-09-17T12:46:47+01:00'],
    )
    notes: Optional[str] = Field(None, examples=['Some example notes'])
    monthly_payment_date: Optional[datetime] = Field(
        None,
        description='Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    credit_card_type: Optional[CreditCardTypeProperty] = None
    account_number: Optional[str] = Field(None, examples=['7009312345678'])
    iban: Optional[str] = Field(None, examples=['GB98MIDL07009312345678'])
    bic: Optional[str] = Field(None, examples=['BOFAUS3N'])
    virtual_balance: Optional[str] = Field(
        None,
        description="The virtual balance of the account in the account's currency or the administration's native currency if the account has no currency.",
        examples=['123.45'],
    )
    native_virtual_balance: Optional[str] = Field(
        None,
        description="The virtual balance of the account in administration's native currency.",
        examples=['123.45'],
    )
    opening_balance: Optional[str] = Field(
        None,
        description="Represents the opening balance, the initial amount this account holds in the currency of the account or the administration's native currency if the account has no currency.",
        examples=['-1012.12'],
    )
    native_opening_balance: Optional[str] = Field(
        None,
        description="Represents the opening balance, in the administration's native currency.",
        examples=['-1012.12'],
    )
    opening_balance_date: Optional[datetime] = Field(
        None,
        description='Represents the date of the opening balance.',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    liability_type: Optional[LiabilityTypeProperty] = None
    liability_direction: Optional[LiabilityDirectionProperty] = None
    interest: Optional[str] = Field(
        None,
        description='Mandatory when type is liability. Interest percentage.',
        examples=['5.3'],
    )
    interest_period: Optional[InterestPeriodProperty] = None
    current_debt: Optional[str] = Field(
        None,
        description='Represents the current debt for liabilities.',
        examples=['1012.12'],
    )
    include_net_worth: Optional[bool] = Field(
        True, description='If omitted, defaults to true.', examples=[True]
    )
    longitude: Optional[float] = Field(
        None,
        description="Latitude of the accounts's location, if applicable. Can be used to draw a map.",
        examples=[5.916667],
    )
    latitude: Optional[float] = Field(
        None,
        description="Latitude of the accounts's location, if applicable. Can be used to draw a map.",
        examples=[51.983333],
    )
    zoom_level: Optional[int] = Field(
        None,
        description='Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.',
        examples=[6],
    )


class AccountStore(BaseModel):
    name: str = Field(..., examples=['My checking account'])
    type: ShortAccountTypeProperty
    iban: Optional[str] = Field(None, examples=['GB98MIDL07009312345678'])
    bic: Optional[str] = Field(None, examples=['BOFAUS3N'])
    account_number: Optional[str] = Field(None, examples=['7009312345678'])
    opening_balance: Optional[str] = Field(
        None,
        description='Represents the opening balance, the initial amount this account holds.',
        examples=['-1012.12'],
    )
    opening_balance_date: Optional[datetime] = Field(
        None,
        description='Represents the date of the opening balance.',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    virtual_balance: Optional[str] = Field(None, examples=['123.45'])
    currency_id: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['12'],
    )
    currency_code: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['EUR'],
    )
    active: Optional[bool] = Field(
        True, description='If omitted, defaults to true.', examples=[False]
    )
    order: Optional[int] = Field(None, description='Order of the account', examples=[1])
    include_net_worth: Optional[bool] = Field(
        True, description='If omitted, defaults to true.', examples=[True]
    )
    account_role: Optional[AccountRoleProperty] = None
    credit_card_type: Optional[CreditCardTypeProperty] = None
    monthly_payment_date: Optional[datetime] = Field(
        None,
        description='Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    liability_type: Optional[LiabilityTypeProperty] = None
    liability_direction: Optional[LiabilityDirectionProperty] = None
    interest: Optional[str] = Field(
        '0',
        description='Mandatory when type is liability. Interest percentage.',
        examples=['5.3'],
    )
    interest_period: Optional[InterestPeriodProperty] = None
    notes: Optional[str] = Field(None, examples=['Some example notes'])
    latitude: Optional[float] = Field(
        None,
        description="Latitude of the accounts's location, if applicable. Can be used to draw a map.",
        examples=[51.983333],
    )
    longitude: Optional[float] = Field(
        None,
        description="Latitude of the accounts's location, if applicable. Can be used to draw a map.",
        examples=[5.916667],
    )
    zoom_level: Optional[int] = Field(
        None,
        description='Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.',
        examples=[6],
    )


class AccountUpdate(BaseModel):
    name: str = Field(..., examples=['My checking account'])
    iban: Optional[str] = Field(None, examples=['GB98MIDL07009312345678'])
    bic: Optional[str] = Field(None, examples=['BOFAUS3N'])
    account_number: Optional[str] = Field(None, examples=['7009312345678'])
    opening_balance: Optional[str] = Field(None, examples=['-1012.12'])
    opening_balance_date: Optional[datetime] = Field(
        None, examples=['2018-09-17T12:46:47+01:00']
    )
    virtual_balance: Optional[str] = Field(None, examples=['123.45'])
    currency_id: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['12'],
    )
    currency_code: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['EUR'],
    )
    active: Optional[bool] = Field(
        True, description='If omitted, defaults to true.', examples=[False]
    )
    order: Optional[int] = Field(None, description='Order of the account', examples=[1])
    include_net_worth: Optional[bool] = Field(
        True, description='If omitted, defaults to true.', examples=[True]
    )
    account_role: Optional[AccountRoleProperty] = None
    credit_card_type: Optional[CreditCardTypeProperty] = None
    monthly_payment_date: Optional[datetime] = Field(
        None,
        description='Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    liability_type: Optional[LiabilityTypeProperty] = None
    interest: Optional[str] = Field(
        None,
        description='Mandatory when type is liability. Interest percentage.',
        examples=['5.3'],
    )
    interest_period: Optional[InterestPeriodProperty] = None
    notes: Optional[str] = Field(None, examples=['Some example notes'])
    latitude: Optional[float] = Field(
        None,
        description="Latitude of the account's location, if applicable. Can be used to draw a map. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.",
        examples=[51.983333],
    )
    longitude: Optional[float] = Field(
        None,
        description="Latitude of the account's location, if applicable. Can be used to draw a map. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.",
        examples=[5.916667],
    )
    zoom_level: Optional[int] = Field(
        None,
        description='Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels. If omitted, the existing location will be kept. If submitted as NULL, the current location will be removed.',
        examples=[6],
    )


class Attachment(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    attachable_type: AttachableType
    attachable_id: str = Field(
        ...,
        description='ID of the model this attachment is linked to.',
        examples=['134'],
    )
    md5: Optional[str] = Field(
        None,
        description='MD5 hash of the file for basic duplicate detection. This field is deprecated.',
        examples=['0c3f95f34370baa88f9fd9a671fea305'],
    )
    hash: Optional[str] = Field(
        None,
        description="Hash of the file for basic duplicate detection. It's still md5 lol.",
        examples=['0c3f95f34370baa88f9fd9a671fea305'],
    )
    filename: str = Field(..., examples=['file.pdf'])
    download_url: Optional[str] = Field(
        None, examples=['https://demo.firefly-iii.org/api/v1/attachments/191/download']
    )
    upload_url: Optional[str] = Field(
        None, examples=['https://demo.firefly-iii.org/api/v1/attachments/191/download']
    )
    title: Optional[str] = Field(None, examples=['Some PDF file'])
    notes: Optional[str] = Field(None, examples=['Some notes'])
    mime: Optional[str] = Field(None, examples=['application/pdf'])
    size: Optional[int] = Field(None, examples=[48211])


class AttachmentStore(BaseModel):
    filename: str = Field(..., examples=['file.pdf'])
    attachable_type: AttachableType
    attachable_id: str = Field(
        ...,
        description='ID of the model this attachment is linked to.',
        examples=['134'],
    )
    title: Optional[str] = Field(None, examples=['Some PDF file'])
    notes: Optional[str] = Field(None, examples=['Some notes'])


class AvailableBudget(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    currency_id: Optional[str] = Field(
        None, description='Use either currency_id or currency_code.', examples=['5']
    )
    currency_code: Optional[str] = Field(
        None, description='Use either currency_id or currency_code.', examples=['EUR']
    )
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_decimal_places: Optional[int] = Field(None, examples=[2])
    native_currency_id: Optional[str] = Field(
        None,
        description="The currency ID of the administration's native currency.",
        examples=['5'],
    )
    native_currency_code: Optional[str] = Field(
        None,
        description="The currency code of the administration's native currency.",
        examples=['EUR'],
    )
    native_currency_symbol: Optional[str] = Field(
        None,
        description="The currency symbol of the administration's native currency.",
        examples=['$'],
    )
    native_currency_decimal_places: Optional[int] = Field(
        None,
        description="The currency decimal places of the administration's native currency.",
        examples=[2],
    )
    amount: str = Field(..., examples=['123.45'])
    native_amount: Optional[str] = Field(
        None,
        description='The amount of this available budget in the native currency of this administration.',
        examples=['123.45'],
    )
    start: datetime = Field(
        ...,
        description='Start date of the available budget.',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    end: datetime = Field(
        ...,
        description='End date of the available budget.',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    spent_in_budgets: Optional[List[BudgetSpent]] = None
    spent_outside_budget: Optional[List[BudgetSpent]] = None


class Bill(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    currency_id: Optional[str] = Field(
        None, description='Use either currency_id or currency_code', examples=['5']
    )
    currency_code: Optional[str] = Field(
        None, description='Use either currency_id or currency_code', examples=['EUR']
    )
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_decimal_places: Optional[int] = Field(None, examples=[2])
    native_currency_id: Optional[str] = Field(
        None, description="The administration's native currency ID.", examples=['5']
    )
    native_currency_code: Optional[str] = Field(
        None, description="The administration's native currency code.", examples=['EUR']
    )
    native_currency_symbol: Optional[str] = Field(
        None, description="The administration's native currency symbol.", examples=['$']
    )
    native_currency_decimal_places: Optional[int] = Field(
        None,
        description="The administration's native currency decimal places.",
        examples=[2],
    )
    name: str = Field(..., examples=['Rent'])
    amount_min: str = Field(..., examples=['123.45'])
    amount_max: str = Field(..., examples=['123.45'])
    native_amount_min: Optional[str] = Field(
        None,
        description="The max amount of this bill in the user's native currency, if the original amount is in a different currency.",
        examples=['123.45'],
    )
    native_amount_max: Optional[str] = Field(
        None,
        description="The min amount of this bill in the user's native currency, if the original amount is in a different currency.",
        examples=['123.45'],
    )
    date: datetime = Field(..., examples=['2018-09-17T12:46:47+01:00'])
    end_date: Optional[datetime] = Field(
        None,
        description='The date after which this bill is no longer valid or applicable',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    extension_date: Optional[datetime] = Field(
        None,
        description='The date before which the bill must be renewed (or cancelled)',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    repeat_freq: BillRepeatFrequency
    skip: Optional[int] = Field(
        None,
        description='How often the bill must be skipped. 1 means a bi-monthly bill.',
        examples=[0],
    )
    active: Optional[bool] = Field(
        None, description='If the bill is active.', examples=[True]
    )
    order: Optional[int] = Field(None, description='Order of the bill.', examples=[1])
    notes: Optional[str] = Field(None, examples=['Some example notes'])
    next_expected_match: Optional[datetime] = Field(
        None,
        description='When the bill is expected to be due.',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    next_expected_match_diff: Optional[str] = Field(
        None,
        description='Formatted (locally) when the bill is due.',
        examples=['today'],
    )
    object_group_id: Optional[str] = Field(
        None,
        description='The group ID of the group this object is part of. NULL if no group.',
        examples=['5'],
    )
    object_group_order: Optional[int] = Field(
        None,
        description='The order of the group. At least 1, for the highest sorting.',
        examples=[5],
    )
    object_group_title: Optional[str] = Field(
        None,
        description='The name of the group. NULL if no group.',
        examples=['Example Group'],
    )
    pay_dates: Optional[List[datetime]] = Field(
        None,
        description='Array of future dates when the bill is expected to be paid. Autogenerated.',
    )
    paid_dates: Optional[List[PaidDate]] = Field(
        None, description='Array of past transactions when the bill was paid.'
    )


class BillStore(BaseModel):
    currency_id: Optional[str] = Field(
        None, description='Use either currency_id or currency_code', examples=['5']
    )
    currency_code: Optional[str] = Field(
        None, description='Use either currency_id or currency_code', examples=['EUR']
    )
    name: str = Field(..., examples=['Rent'])
    amount_min: str = Field(..., examples=['123.45'])
    amount_max: str = Field(..., examples=['123.45'])
    date: datetime = Field(..., examples=['2018-09-17T12:46:47+01:00'])
    end_date: Optional[datetime] = Field(
        None,
        description='The date after which this bill is no longer valid or applicable',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    extension_date: Optional[datetime] = Field(
        None,
        description='The date before which the bill must be renewed (or cancelled)',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    repeat_freq: BillRepeatFrequency
    skip: Optional[int] = Field(
        None,
        description='How often the bill must be skipped. 1 means a bi-monthly bill.',
        examples=[0],
    )
    active: Optional[bool] = Field(
        None, description='If the bill is active.', examples=[True]
    )
    notes: Optional[str] = Field(None, examples=['Some example notes'])
    object_group_id: Optional[str] = Field(
        None,
        description='The group ID of the group this object is part of. NULL if no group.',
        examples=['5'],
    )
    object_group_title: Optional[str] = Field(
        None,
        description='The name of the group. NULL if no group.',
        examples=['Example Group'],
    )


class BillUpdate(BaseModel):
    currency_id: Optional[str] = Field(
        None, description='Use either currency_id or currency_code', examples=['5']
    )
    currency_code: Optional[str] = Field(
        None, description='Use either currency_id or currency_code', examples=['EUR']
    )
    name: str = Field(..., examples=['Rent'])
    amount_min: Optional[str] = Field(None, examples=['123.45'])
    amount_max: Optional[str] = Field(None, examples=['123.45'])
    date: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    end_date: Optional[datetime] = Field(
        None,
        description='The date after which this bill is no longer valid or applicable',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    extension_date: Optional[datetime] = Field(
        None,
        description='The date before which the bill must be renewed (or cancelled)',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    repeat_freq: Optional[BillRepeatFrequency] = None
    skip: Optional[int] = Field(
        None,
        description='How often the bill must be skipped. 1 means a bi-monthly bill.',
        examples=[0],
    )
    active: Optional[bool] = Field(
        None, description='If the bill is active.', examples=[True]
    )
    notes: Optional[str] = Field(None, examples=['Some example notes'])
    object_group_id: Optional[str] = Field(
        None,
        description='The group ID of the group this object is part of. NULL if no group.',
        examples=['5'],
    )
    object_group_title: Optional[str] = Field(
        None,
        description='The name of the group. NULL if no group.',
        examples=['Example Group'],
    )


class Budget(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    name: str = Field(..., examples=['Bills'])
    active: Optional[bool] = Field(None, examples=[False])
    notes: Optional[str] = Field(None, examples=['Some notes'])
    order: Optional[int] = Field(None, examples=[5])
    auto_budget_type: Optional[AutoBudgetType] = None
    currency_id: Optional[str] = Field(
        None,
        description="The currency ID that is part of the budget's auto-budget settings, if any.",
        examples=['12'],
    )
    currency_code: Optional[str] = Field(
        None,
        description="The currency code that is part of the budget's auto-budget settings, if any.",
        examples=['EUR'],
    )
    currency_symbol: Optional[str] = Field(
        None,
        description="The currency symbol that is part of the budget's auto-budget settings, if any.",
        examples=['$'],
    )
    currency_decimal_places: Optional[int] = Field(
        None,
        description="The currency decimal places that is part of the budget's auto-budget settings, if any.",
        examples=[2],
    )
    native_currency_id: Optional[str] = Field(
        None, description="The administration's native currency ID.", examples=['5']
    )
    native_currency_code: Optional[str] = Field(
        None, description="The administration's native currency code.", examples=['EUR']
    )
    native_currency_symbol: Optional[str] = Field(
        None, description="The administration's native currency symbol.", examples=['$']
    )
    native_currency_decimal_places: Optional[int] = Field(
        None,
        description="The administration's native currency decimal places.",
        examples=[2],
    )
    auto_budget_amount: Optional[str] = Field(
        None,
        description='The amount for the auto-budget, if set.',
        examples=['-1012.12'],
    )
    native_auto_budget_amount: Optional[str] = Field(
        None,
        description='The native amount for the auto-budget, if set.',
        examples=['-1012.12'],
    )
    auto_budget_period: Optional[AutoBudgetPeriod] = None
    spent: Optional[List[BudgetSpent]] = Field(
        None,
        description='Information on how much was spent in this budget. Is only filled in when the start and end date are submitted.',
    )


class BudgetStore(BaseModel):
    name: str = Field(..., examples=['Bills'])
    active: Optional[bool] = Field(None, examples=[False])
    order: Optional[int] = Field(None, examples=[5])
    notes: Optional[str] = Field(None, examples=['Some notes'])
    auto_budget_type: Optional[AutoBudgetType] = None
    auto_budget_currency_id: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['12'],
    )
    auto_budget_currency_code: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['EUR'],
    )
    auto_budget_amount: Optional[str] = Field(None, examples=['-1012.12'])
    auto_budget_period: Optional[AutoBudgetPeriod] = None


class BudgetUpdate(BaseModel):
    name: str = Field(..., examples=['Bills'])
    active: Optional[bool] = Field(None, examples=[False])
    order: Optional[int] = Field(None, examples=[5])
    notes: Optional[str] = Field(None, examples=['Some notes'])
    auto_budget_type: Optional[AutoBudgetType] = None
    auto_budget_currency_id: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['12'],
    )
    auto_budget_currency_code: Optional[str] = Field(
        None,
        description="Use either currency_id or currency_code. Defaults to the user's default currency.",
        examples=['EUR'],
    )
    auto_budget_amount: Optional[str] = Field(None, examples=['-1012.12'])
    auto_budget_period: Optional[AutoBudgetPeriod] = None


class Category(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    name: str = Field(..., examples=['Lunch'])
    notes: Optional[str] = Field(None, examples=['Some example notes'])
    native_currency_id: Optional[str] = Field(
        None, description="The administration's native currency ID.", examples=['5']
    )
    native_currency_code: Optional[str] = Field(
        None, description="The administration's native currency code.", examples=['EUR']
    )
    native_currency_symbol: Optional[str] = Field(
        None, description="The administration's native currency symbol.", examples=['$']
    )
    native_currency_decimal_places: Optional[int] = Field(
        None,
        description="The administration's native currency decimal places.",
        examples=[2],
    )
    spent: Optional[List[CategorySpent]] = None
    earned: Optional[List[CategoryEarned]] = None


class CurrencyExchangeRateRead(BaseModel):
    type: str = Field(
        ..., description='Immutable value', examples=['currency_exchange_rates']
    )
    id: str = Field(..., examples=['2'])
    attributes: CurrencyExchangeRateReadAttributes
    links: ObjectLink


class CurrencyExchangeRateSingle(BaseModel):
    data: CurrencyExchangeRateRead


class PiggyBank(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    name: str = Field(..., examples=['New digital camera'])
    accounts: Optional[List[PiggyBankAccountRead]] = None
    currency_id: Optional[str] = Field(None, examples=['5'])
    currency_code: Optional[str] = Field(None, examples=['USD'])
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_decimal_places: Optional[int] = Field(
        None, description='Number of decimals supported by the currency', examples=[2]
    )
    target_amount: str = Field(..., examples=['123.45'])
    percentage: Optional[float] = Field(None, examples=[12.5])
    current_amount: Optional[str] = Field(None, examples=['123.45'])
    left_to_save: Optional[str] = Field(None, examples=['700.00'])
    save_per_month: Optional[str] = Field(None, examples=['12.45'])
    start_date: Optional[date_aliased] = Field(
        None,
        description='The date you started with this piggy bank.',
        examples=['2018-09-17'],
    )
    target_date: Optional[date_aliased] = Field(
        None,
        description='The date you intend to finish saving money.',
        examples=['2018-09-17'],
    )
    order: Optional[int] = Field(None, examples=[5])
    active: Optional[bool] = Field(None, examples=[True])
    notes: Optional[str] = Field(None, examples=['Some notes'])
    object_group_id: Optional[str] = Field(
        None,
        description='The group ID of the group this object is part of. NULL if no group.',
        examples=['5'],
    )
    object_group_order: Optional[int] = Field(
        None,
        description='The order of the group. At least 1, for the highest sorting.',
        examples=[5],
    )
    object_group_title: Optional[str] = Field(
        None,
        description='The name of the group. NULL if no group.',
        examples=['Example Group'],
    )


class RecurrenceRepetition(BaseModel):
    id: Optional[str] = Field(None, examples=['2'])
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    type: RecurrenceRepetitionType
    moment: str = Field(
        ...,
        description="Information that defined the type of repetition.\n- For 'daily', this is empty.\n- For 'weekly', it is day of the week between 1 and 7 (Monday - Sunday).\n- For 'ndom', it is '1,2' or '4,5' or something else, where the first number is the week in the month, and the second number is the day in the week (between 1 and 7). '2,3' means: the 2nd Wednesday of the month\n- For 'monthly' it is the day of the month (1 - 31)\n- For yearly, it is a full date, ie '2018-09-17'. The year you use does not matter.\n",
        examples=['3'],
    )
    skip: Optional[int] = Field(
        None,
        description='How many occurrences to skip. 0 means skip nothing. 1 means every other.',
        examples=[0],
    )
    weekend: Optional[int] = Field(
        None,
        description='How to respond when the recurring transaction falls in the weekend. Possible values:\n1. Do nothing, just create it\n2. Create no transaction.\n3. Skip to the previous Friday.\n4. Skip to the next Monday.\n',
        examples=[1],
    )
    description: Optional[str] = Field(
        None,
        description='Auto-generated repetition description.',
        examples=['Every week on Friday'],
    )
    occurrences: Optional[List[datetime]] = Field(
        None,
        description='Array of future dates when the repetition will apply to. Auto generated.',
    )


class RecurrenceRepetitionStore(BaseModel):
    type: RecurrenceRepetitionType
    moment: str = Field(
        ...,
        description="Information that defined the type of repetition.\n- For 'daily', this is empty.\n- For 'weekly', it is day of the week between 1 and 7 (Monday - Sunday).\n- For 'ndom', it is '1,2' or '4,5' or something else, where the first number is the week in the month, and the second number is the day in the week (between 1 and 7). '2,3' means: the 2nd Wednesday of the month\n- For 'monthly' it is the day of the month (1 - 31)\n- For yearly, it is a full date, ie '2018-09-17'. The year you use does not matter.\n",
        examples=['3'],
    )
    skip: Optional[int] = Field(
        None,
        description='How many occurrences to skip. 0 means skip nothing. 1 means every other.',
        examples=[0],
    )
    weekend: Optional[int] = Field(
        None,
        description='How to respond when the recurring transaction falls in the weekend. Possible values:\n1. Do nothing, just create it\n2. Create no transaction.\n3. Skip to the previous Friday.\n4. Skip to the next Monday.\n',
        examples=[1],
    )


class RecurrenceRepetitionUpdate(BaseModel):
    type: Optional[RecurrenceRepetitionType] = None
    moment: Optional[str] = Field(
        None,
        description="Information that defined the type of repetition.\n- For 'daily', this is empty.\n- For 'weekly', it is day of the week between 1 and 7 (Monday - Sunday).\n- For 'ndom', it is '1,2' or '4,5' or something else, where the first number is the week in the month, and the second number is the day in the week (between 1 and 7). '2,3' means: the 2nd Wednesday of the month\n- For 'monthly' it is the day of the month (1 - 31)\n- For yearly, it is a full date, ie '2018-09-17'. The year you use does not matter.\n",
        examples=['3'],
    )
    skip: Optional[int] = Field(
        None,
        description='How many occurrences to skip. 0 means skip nothing. 1 means every other.',
        examples=[0],
    )
    weekend: Optional[int] = Field(
        None,
        description='How to respond when the recurring transaction falls in the weekend. Possible values:\n1. Do nothing, just create it\n2. Create no transaction.\n3. Skip to the previous Friday.\n4. Skip to the next Monday.\n',
        examples=[1],
    )


class RecurrenceTransaction(BaseModel):
    id: Optional[str] = Field(
        None,
        examples=[
            'ID of the recurring transaction. Not to be confused with the ID of the recurrence itself.'
        ],
    )
    description: str = Field(..., examples=['Rent for the current month'])
    amount: str = Field(
        ..., description='Amount of the transaction.', examples=['123.45']
    )
    foreign_amount: Optional[str] = Field(
        None, description='Foreign amount of the transaction.', examples=['123.45']
    )
    currency_id: Optional[str] = Field(
        None,
        description='Submit either a currency_id or a currency_code.',
        examples=['3'],
    )
    currency_code: Optional[str] = Field(
        None,
        description='Submit either a currency_id or a currency_code.',
        examples=['EUR'],
    )
    currency_symbol: Optional[str] = Field(None, examples=['€'])
    currency_decimal_places: Optional[int] = Field(
        None, description='Number of decimals in the currency', examples=[2]
    )
    foreign_currency_id: Optional[str] = Field(
        None,
        description='Submit either a foreign_currency_id or a foreign_currency_code, or neither.',
        examples=['17'],
    )
    foreign_currency_code: Optional[str] = Field(
        None,
        description='Submit either a foreign_currency_id or a foreign_currency_code, or neither.',
        examples=['GBP'],
    )
    foreign_currency_symbol: Optional[str] = Field(None, examples=['$'])
    foreign_currency_decimal_places: Optional[int] = Field(
        None, description='Number of decimals in the currency', examples=[2]
    )
    budget_id: Optional[str] = Field(
        None, description='The budget ID for this transaction.', examples=['4']
    )
    budget_name: Optional[str] = Field(
        None,
        description='The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.',
        examples=['Groceries'],
    )
    category_id: Optional[str] = Field(
        None, description='Category ID for this transaction.', examples=['211']
    )
    category_name: Optional[str] = Field(
        None, description='Category name for this transaction.', examples=['Bills']
    )
    source_id: Optional[str] = Field(
        None,
        description='ID of the source account. Submit either this or source_name.',
        examples=['913'],
    )
    source_name: Optional[str] = Field(
        None,
        description='Name of the source account. Submit either this or source_id.',
        examples=['Checking account'],
    )
    source_iban: Optional[str] = Field(None, examples=['NL02ABNA0123456789'])
    source_type: Optional[AccountTypeProperty] = None
    destination_id: Optional[str] = Field(
        None,
        description='ID of the destination account. Submit either this or destination_name.',
        examples=['258'],
    )
    destination_name: Optional[str] = Field(
        None,
        description='Name of the destination account. Submit either this or destination_id.',
        examples=['Buy and Large'],
    )
    destination_iban: Optional[str] = Field(None, examples=['NL02ABNA0123456789'])
    destination_type: Optional[AccountTypeProperty] = None
    tags: Optional[List[str]] = Field(
        None, description='Array of tags.', examples=[None]
    )
    piggy_bank_id: Optional[str] = Field(
        None,
        description='Optional. Use either this or the piggy_bank_name',
        examples=['123'],
    )
    piggy_bank_name: Optional[str] = Field(
        None, description='Optional. Use either this or the piggy_bank_id'
    )
    bill_id: Optional[str] = Field(
        None, description='Optional. Use either this or the bill_name', examples=['123']
    )
    bill_name: Optional[str] = Field(
        None, description='Optional. Use either this or the bill_id'
    )


class RuleAction(BaseModel):
    id: Optional[str] = Field(None, examples=['2'])
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    type: RuleActionKeyword
    value: str = Field(
        ...,
        description='The accompanying value the action will set, change or update. Can be empty, but for some types this value is mandatory.',
        examples=['Daily groceries'],
    )
    order: Optional[int] = Field(None, description='Order of the action', examples=[5])
    active: Optional[bool] = Field(
        True, description='If the action is active. Defaults to true.', examples=[True]
    )
    stop_processing: Optional[bool] = Field(
        False,
        description='When true, other actions will not be fired after this action has fired. Defaults to false.',
        examples=[False],
    )


class RuleActionStore(BaseModel):
    type: RuleActionKeyword
    value: str = Field(
        ...,
        description='The accompanying value the action will set, change or update. Can be empty, but for some types this value is mandatory.',
        examples=['Daily groceries'],
    )
    order: Optional[int] = Field(None, description='Order of the action', examples=[5])
    active: Optional[bool] = Field(
        True, description='If the action is active. Defaults to true.', examples=[True]
    )
    stop_processing: Optional[bool] = Field(
        False,
        description='When true, other actions will not be fired after this action has fired. Defaults to false.',
        examples=[False],
    )


class RuleActionUpdate(BaseModel):
    type: Optional[RuleActionKeyword] = None
    value: Optional[str] = Field(
        None,
        description='The accompanying value the action will set, change or update. Can be empty, but for some types this value is mandatory.',
        examples=['Daily groceries'],
    )
    order: Optional[int] = Field(None, description='Order of the action', examples=[5])
    active: Optional[bool] = Field(
        None, description='If the action is active.', examples=[True]
    )
    stop_processing: Optional[bool] = Field(
        None,
        description='When true, other actions will not be fired after this action has fired.',
        examples=[False],
    )


class RuleTrigger(BaseModel):
    id: Optional[str] = Field(None, examples=['2'])
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    type: RuleTriggerKeyword
    value: str = Field(
        ...,
        description='The accompanying value the trigger responds to. This value is often mandatory, but this depends on the trigger.',
        examples=['tag1'],
    )
    prohibited: Optional[bool] = Field(
        False,
        description="If 'prohibited' is true, this rule trigger will be negated. 'Description is' will become 'Description is NOT' etc.",
        examples=[False],
    )
    order: Optional[int] = Field(None, description='Order of the trigger', examples=[5])
    active: Optional[bool] = Field(
        True, description='If the trigger is active. Defaults to true.', examples=[True]
    )
    stop_processing: Optional[bool] = Field(
        False,
        description='When true, other triggers will not be checked if this trigger was triggered. Defaults to false.',
        examples=[False],
    )


class RuleTriggerStore(BaseModel):
    type: RuleTriggerKeyword
    value: str = Field(
        ...,
        description='The accompanying value the trigger responds to. This value is often mandatory, but this depends on the trigger.',
        examples=['tag1'],
    )
    order: Optional[int] = Field(None, description='Order of the trigger', examples=[5])
    active: Optional[bool] = Field(
        True, description='If the trigger is active. Defaults to true.', examples=[True]
    )
    prohibited: Optional[bool] = Field(
        False,
        description="If 'prohibited' is true, this rule trigger will be negated. 'Description is' will become 'Description is NOT' etc.",
        examples=[False],
    )
    stop_processing: Optional[bool] = Field(
        False,
        description='When true, other triggers will not be checked if this trigger was triggered. Defaults to false.',
        examples=[False],
    )


class RuleTriggerUpdate(BaseModel):
    type: Optional[RuleTriggerKeyword] = None
    value: Optional[str] = Field(
        None,
        description="The accompanying value the trigger responds to. This value is often mandatory, but this depends on the trigger. If the rule trigger is something like 'has any tag', submit the string 'true'.",
        examples=['tag1'],
    )
    order: Optional[int] = Field(None, description='Order of the trigger', examples=[5])
    active: Optional[bool] = Field(
        None, description='If the trigger is active.', examples=[True]
    )
    stop_processing: Optional[bool] = Field(
        None,
        description='When true, other triggers will not be checked if this trigger was triggered.',
        examples=[False],
    )


class TransactionSplit(BaseModel):
    user: Optional[str] = Field(None, description='User ID', examples=['3'])
    transaction_journal_id: Optional[str] = Field(
        None,
        description='ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals\nmaking up the splits of the transaction.\n',
        examples=['10421'],
    )
    type: TransactionTypeProperty
    date: datetime = Field(
        ...,
        description='Date of the transaction',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    order: Optional[int] = Field(
        None,
        description='Order of this entry in the list of transactions.',
        examples=[0],
    )
    currency_id: Optional[str] = Field(
        None,
        description="Currency ID. Default is the source account's currency, or the user's default currency. Can be used instead of currency_code.",
        examples=['12'],
    )
    currency_code: Optional[str] = Field(
        None,
        description="Currency code. Default is the source account's currency, or the user's default currency. Can be used instead of currency_id.",
        examples=['EUR'],
    )
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_name: Optional[str] = Field(None, examples=['Euro'])
    currency_decimal_places: Optional[int] = Field(
        None, description='Number of decimals used in this currency.', examples=[2]
    )
    foreign_currency_id: Optional[str] = Field(
        None,
        description='Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.',
        examples=['17'],
    )
    foreign_currency_code: Optional[str] = Field(
        None,
        description='Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.',
        examples=['USD'],
    )
    foreign_currency_symbol: Optional[str] = Field(None, examples=['$'])
    foreign_currency_decimal_places: Optional[int] = Field(
        None, description='Number of decimals in the currency', examples=[2]
    )
    amount: str = Field(
        ..., description='Amount of the transaction.', examples=['123.45']
    )
    foreign_amount: Optional[str] = Field(
        None, description='The amount in a foreign currency.', examples=['123.45']
    )
    description: str = Field(
        ..., description='Description of the transaction.', examples=['Vegetables']
    )
    source_id: str = Field(
        ...,
        description='ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.',
        examples=['2'],
    )
    source_name: Optional[str] = Field(
        None,
        description='Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.',
        examples=['Checking account'],
    )
    source_iban: Optional[str] = Field(None, examples=['NL02ABNA0123456789'])
    source_type: Optional[AccountTypeProperty] = None
    destination_id: str = Field(
        ...,
        description='ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.',
        examples=['2'],
    )
    destination_name: Optional[str] = Field(
        None,
        description='Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.',
        examples=['Buy and Large'],
    )
    destination_iban: Optional[str] = Field(None, examples=['NL02ABNA0123456789'])
    destination_type: Optional[AccountTypeProperty] = None
    budget_id: Optional[str] = Field(
        None, description='The budget ID for this transaction.', examples=['4']
    )
    budget_name: Optional[str] = Field(
        None,
        description='The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.',
        examples=['Groceries'],
    )
    category_id: Optional[str] = Field(
        None, description='The category ID for this transaction.', examples=['43']
    )
    category_name: Optional[str] = Field(
        None,
        description='The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.',
        examples=['Groceries'],
    )
    bill_id: Optional[str] = Field(
        None, description='Optional. Use either this or the bill_name', examples=['111']
    )
    bill_name: Optional[str] = Field(
        None,
        description='Optional. Use either this or the bill_id',
        examples=['Monthly rent'],
    )
    reconciled: Optional[bool] = Field(
        None,
        description='If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.',
        examples=[False],
    )
    notes: Optional[str] = Field(None, examples=['Some example notes'])
    tags: Optional[List[str]] = Field(
        None, description='Array of tags.', examples=[None]
    )
    internal_reference: Optional[str] = Field(
        None, description='Reference to internal reference of other systems.'
    )
    external_id: Optional[str] = Field(
        None, description='Reference to external ID in other systems.'
    )
    external_url: Optional[str] = Field(
        None, description='External, custom URL for this transaction.'
    )
    original_source: Optional[str] = Field(
        None,
        description='System generated identifier for original creator of transaction.',
    )
    recurrence_id: Optional[str] = Field(
        None, description='Reference to recurrence that made the transaction.'
    )
    recurrence_total: Optional[int] = Field(
        None,
        description='Total number of transactions expected to be created by this recurrence repetition. Will be 0 if infinite.',
        examples=[0],
    )
    recurrence_count: Optional[int] = Field(
        None,
        description='The # of the current transaction created under this recurrence.',
        examples=[12],
    )
    bunq_payment_id: Optional[str] = Field(
        None, description='Internal ID of bunq transaction. DEPRECATED'
    )
    import_hash_v2: Optional[str] = Field(
        None,
        description='Hash value of original import transaction (for duplicate detection).',
    )
    sepa_cc: Optional[str] = Field(None, description='SEPA Clearing Code')
    sepa_ct_op: Optional[str] = Field(
        None, description='SEPA Opposing Account Identifier'
    )
    sepa_ct_id: Optional[str] = Field(None, description='SEPA end-to-end Identifier')
    sepa_db: Optional[str] = Field(None, description='SEPA mandate identifier')
    sepa_country: Optional[str] = Field(None, description='SEPA Country')
    sepa_ep: Optional[str] = Field(None, description='SEPA External Purpose indicator')
    sepa_ci: Optional[str] = Field(None, description='SEPA Creditor Identifier')
    sepa_batch_id: Optional[str] = Field(None, description='SEPA Batch ID')
    interest_date: Optional[datetime] = None
    book_date: Optional[datetime] = None
    process_date: Optional[datetime] = None
    due_date: Optional[datetime] = None
    payment_date: Optional[datetime] = None
    invoice_date: Optional[datetime] = None
    latitude: Optional[float] = Field(
        None,
        description="Latitude of the transaction's location, if applicable. Can be used to draw a map.",
        examples=[51.983333],
    )
    longitude: Optional[float] = Field(
        None,
        description="Latitude of the transaction's location, if applicable. Can be used to draw a map.",
        examples=[5.916667],
    )
    zoom_level: Optional[int] = Field(
        None,
        description='Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.',
        examples=[6],
    )
    has_attachments: Optional[bool] = Field(
        None, description='If the transaction has attachments.', examples=[False]
    )


class TransactionSplitStore(BaseModel):
    type: TransactionTypeProperty
    date: datetime = Field(
        ...,
        description='Date of the transaction',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    amount: str = Field(
        ..., description='Amount of the transaction.', examples=['123.45']
    )
    description: str = Field(
        ..., description='Description of the transaction.', examples=['Vegetables']
    )
    order: Optional[int] = Field(
        None,
        description='Order of this entry in the list of transactions.',
        examples=[0],
    )
    currency_id: Optional[str] = Field(
        None,
        description="Currency ID. Default is the source account's currency, or the user's default currency. The value you submit may be overruled by the source or destination account.",
        examples=['12'],
    )
    currency_code: Optional[str] = Field(
        None,
        description="Currency code. Default is the source account's currency, or the user's default currency. The value you submit may be overruled by the source or destination account.",
        examples=['EUR'],
    )
    foreign_amount: Optional[str] = Field(
        None, description='The amount in a foreign currency.', examples=['123.45']
    )
    foreign_currency_id: Optional[str] = Field(
        None,
        description='Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.',
        examples=['17'],
    )
    foreign_currency_code: Optional[str] = Field(
        None,
        description='Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.',
        examples=['USD'],
    )
    budget_id: Optional[str] = Field(
        None, description='The budget ID for this transaction.', examples=['4']
    )
    budget_name: Optional[str] = Field(
        None,
        description='The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.',
        examples=['Groceries'],
    )
    category_id: Optional[str] = Field(
        None, description='The category ID for this transaction.', examples=['43']
    )
    category_name: Optional[str] = Field(
        None,
        description='The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.',
        examples=['Groceries'],
    )
    source_id: Optional[str] = Field(
        None,
        description='ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.',
        examples=['2'],
    )
    source_name: Optional[str] = Field(
        None,
        description='Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.',
        examples=['Checking account'],
    )
    destination_id: Optional[str] = Field(
        None,
        description='ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.',
        examples=['2'],
    )
    destination_name: Optional[str] = Field(
        None,
        description='Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.',
        examples=['Buy and Large'],
    )
    reconciled: Optional[bool] = Field(
        None,
        description='If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.',
        examples=[False],
    )
    piggy_bank_id: Optional[int] = Field(
        None, description='Optional. Use either this or the piggy_bank_name'
    )
    piggy_bank_name: Optional[str] = Field(
        None, description='Optional. Use either this or the piggy_bank_id'
    )
    bill_id: Optional[str] = Field(
        None, description='Optional. Use either this or the bill_name', examples=['112']
    )
    bill_name: Optional[str] = Field(
        None,
        description='Optional. Use either this or the bill_id',
        examples=['Monthly rent'],
    )
    tags: Optional[List[str]] = Field(
        None, description='Array of tags.', examples=[None]
    )
    notes: Optional[str] = Field(None, examples=['Some example notes'])
    internal_reference: Optional[str] = Field(
        None, description='Reference to internal reference of other systems.'
    )
    external_id: Optional[str] = Field(
        None, description='Reference to external ID in other systems.'
    )
    external_url: Optional[str] = Field(
        None, description='External, custom URL for this transaction.'
    )
    bunq_payment_id: Optional[str] = Field(
        None,
        description='Internal ID of bunq transaction. Field is no longer used but still works.',
    )
    sepa_cc: Optional[str] = Field(None, description='SEPA Clearing Code')
    sepa_ct_op: Optional[str] = Field(
        None, description='SEPA Opposing Account Identifier'
    )
    sepa_ct_id: Optional[str] = Field(None, description='SEPA end-to-end Identifier')
    sepa_db: Optional[str] = Field(None, description='SEPA mandate identifier')
    sepa_country: Optional[str] = Field(None, description='SEPA Country')
    sepa_ep: Optional[str] = Field(None, description='SEPA External Purpose indicator')
    sepa_ci: Optional[str] = Field(None, description='SEPA Creditor Identifier')
    sepa_batch_id: Optional[str] = Field(None, description='SEPA Batch ID')
    interest_date: Optional[datetime] = None
    book_date: Optional[datetime] = None
    process_date: Optional[datetime] = None
    due_date: Optional[datetime] = None
    payment_date: Optional[datetime] = None
    invoice_date: Optional[datetime] = None


class TransactionSplitUpdate(BaseModel):
    transaction_journal_id: Optional[str] = Field(
        None,
        description='Transaction journal ID of current transaction (split).',
        examples=['123'],
    )
    type: Optional[TransactionTypeProperty] = None
    date: Optional[datetime] = Field(
        None,
        description='Date of the transaction',
        examples=['2018-09-17T12:46:47+01:00'],
    )
    amount: Optional[str] = Field(
        None, description='Amount of the transaction.', examples=['123.45']
    )
    description: Optional[str] = Field(
        None, description='Description of the transaction.', examples=['Vegetables']
    )
    order: Optional[int] = Field(
        None,
        description='Order of this entry in the list of transactions.',
        examples=[0],
    )
    currency_id: Optional[str] = Field(
        None,
        description="Currency ID. Default is the source account's currency, or the user's default currency. Can be used instead of currency_code.",
        examples=['12'],
    )
    currency_code: Optional[str] = Field(
        None,
        description="Currency code. Default is the source account's currency, or the user's default currency. Can be used instead of currency_id.",
        examples=['EUR'],
    )
    currency_symbol: Optional[str] = Field(None, examples=['$'])
    currency_name: Optional[str] = Field(None, examples=['Euro'])
    currency_decimal_places: Optional[int] = Field(
        None, description='Number of decimals used in this currency.', examples=[2]
    )
    foreign_amount: Optional[str] = Field(
        None, description='The amount in a foreign currency.', examples=['123.45']
    )
    foreign_currency_id: Optional[str] = Field(
        None,
        description='Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.',
        examples=['17'],
    )
    foreign_currency_code: Optional[str] = Field(
        None,
        description='Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.',
        examples=['USD'],
    )
    foreign_currency_symbol: Optional[str] = Field(None, examples=['$'])
    foreign_currency_decimal_places: Optional[int] = Field(
        None, description='Number of decimals in the currency', examples=[2]
    )
    budget_id: Optional[str] = Field(
        None, description='The budget ID for this transaction.', examples=['4']
    )
    budget_name: Optional[str] = Field(
        None,
        description='The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.',
        examples=['Groceries'],
    )
    category_id: Optional[str] = Field(
        None, description='The category ID for this transaction.', examples=['43']
    )
    category_name: Optional[str] = Field(
        None,
        description='The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.',
        examples=['Groceries'],
    )
    source_id: Optional[str] = Field(
        None,
        description='ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.',
        examples=['2'],
    )
    source_name: Optional[str] = Field(
        None,
        description='Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.',
        examples=['Checking account'],
    )
    source_iban: Optional[str] = Field(None, examples=['NL02ABNA0123456789'])
    destination_id: Optional[str] = Field(
        None,
        description='ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.',
        examples=['2'],
    )
    destination_name: Optional[str] = Field(
        None,
        description='Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.',
        examples=['Buy and Large'],
    )
    destination_iban: Optional[str] = Field(None, examples=['NL02ABNA0123456789'])
    reconciled: Optional[bool] = Field(
        None,
        description='If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.',
        examples=[False],
    )
    bill_id: Optional[str] = Field(
        None, description='Optional. Use either this or the bill_name', examples=['111']
    )
    bill_name: Optional[str] = Field(
        None,
        description='Optional. Use either this or the bill_id',
        examples=['Monthly rent'],
    )
    tags: Optional[List[str]] = Field(
        None, description='Array of tags.', examples=[None]
    )
    notes: Optional[str] = Field(None, examples=['Some example notes'])
    internal_reference: Optional[str] = Field(
        None, description='Reference to internal reference of other systems.'
    )
    external_id: Optional[str] = Field(
        None, description='Reference to external ID in other systems.'
    )
    external_url: Optional[str] = Field(
        None, description='External, custom URL for this transaction.'
    )
    bunq_payment_id: Optional[str] = Field(
        None, description='Internal ID of bunq transaction.'
    )
    sepa_cc: Optional[str] = Field(None, description='SEPA Clearing Code')
    sepa_ct_op: Optional[str] = Field(
        None, description='SEPA Opposing Account Identifier'
    )
    sepa_ct_id: Optional[str] = Field(None, description='SEPA end-to-end Identifier')
    sepa_db: Optional[str] = Field(None, description='SEPA mandate identifier')
    sepa_country: Optional[str] = Field(None, description='SEPA Country')
    sepa_ep: Optional[str] = Field(None, description='SEPA External Purpose indicator')
    sepa_ci: Optional[str] = Field(None, description='SEPA Creditor Identifier')
    sepa_batch_id: Optional[str] = Field(None, description='SEPA Batch ID')
    interest_date: Optional[datetime] = None
    book_date: Optional[datetime] = None
    process_date: Optional[datetime] = None
    due_date: Optional[datetime] = None
    payment_date: Optional[datetime] = None
    invoice_date: Optional[datetime] = None


class User(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    email: EmailStr = Field(
        ...,
        description='The new users email address.',
        examples=['james@firefly-iii.org'],
    )
    blocked: Optional[bool] = Field(
        None,
        description='Boolean to indicate if the user is blocked.',
        examples=[False],
    )
    blocked_code: Optional[UserBlockedCodeProperty] = None
    role: Optional[UserRoleProperty] = None


class UserGroupReadMembers(BaseModel):
    user_id: Optional[str] = Field(
        None, description='The ID of the member.', examples=['5']
    )
    user_email: Optional[EmailStr] = Field(
        None,
        description='The email address of the member',
        examples=['james@firefly-iii.org'],
    )
    you: Optional[bool] = Field(
        None, description='Is this you? (the current user)', examples=[False]
    )
    roles: Optional[List[UserGroupReadRole]] = None


class Webhook(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    active: Optional[bool] = Field(
        None,
        description='Boolean to indicate if the webhook is active',
        examples=[False],
    )
    title: str = Field(
        ...,
        description='A title for the webhook for easy recognition.',
        examples=['Update magic mirror on new transaction'],
    )
    secret: Optional[str] = Field(
        None,
        description="A 24-character secret for the webhook. It's generated by Firefly III when saving a new webhook. If you submit a new secret through the PUT endpoint it will generate a new secret for the selected webhook, a new secret bearing no relation to whatever you just submitted.",
        examples=['iMLZLtLx2JHWhK9Dtyuoqyir'],
    )
    trigger: WebhookTrigger
    response: WebhookResponse
    delivery: WebhookDelivery
    url: str = Field(
        ...,
        description='The URL of the webhook. Has to start with `https`.',
        examples=['https://example.com'],
    )


class WebhookStore(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Boolean to indicate if the webhook is active',
        examples=[False],
    )
    title: str = Field(
        ...,
        description='A title for the webhook for easy recognition.',
        examples=['Update magic mirror on new transaction'],
    )
    trigger: WebhookTrigger
    response: WebhookResponse
    delivery: WebhookDelivery
    url: str = Field(
        ...,
        description='The URL of the webhook. Has to start with `https`.',
        examples=['https://example.com'],
    )


class WebhookUpdate(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Boolean to indicate if the webhook is active',
        examples=[False],
    )
    title: Optional[str] = Field(
        None,
        description='A title for the webhook for easy recognition.',
        examples=['Update magic mirror on new transaction'],
    )
    secret: Optional[str] = Field(
        None,
        description="A 24-character secret for the webhook. It's generated by Firefly III when saving a new webhook. If you submit a new secret through the PUT endpoint it will generate a new secret for the selected webhook, a new secret bearing no relation to whatever you just submitted.",
        examples=['iMLZLtLx2JHWhK9Dtyuoqyir'],
    )
    trigger: Optional[WebhookTrigger] = None
    response: Optional[WebhookResponse] = None
    delivery: Optional[WebhookDelivery] = None
    url: Optional[str] = Field(
        None,
        description='The URL of the webhook. Has to start with `https`.',
        examples=['https://example.com'],
    )


class PolymorphicProperty(
    RootModel[Union[bool, str, Dict[str, Any], List[StringArrayItem]]]
):
    root: Union[bool, str, Dict[str, Any], List[StringArrayItem]]


class BasicSummary(RootModel[Optional[Dict[str, BasicSummaryEntry]]]):
    root: Optional[Dict[str, BasicSummaryEntry]] = None


class Configuration(BaseModel):
    title: ConfigValueFilter
    value: PolymorphicProperty
    editable: bool = Field(
        ...,
        description='If this config variable can be edited by the user',
        examples=[True],
    )


class ConfigurationUpdate(BaseModel):
    value: PolymorphicProperty


class CronResult(BaseModel):
    recurring_transactions: Optional[CronResultRow] = None
    auto_budgets: Optional[CronResultRow] = None
    telemetry: Optional[CronResultRow] = None


class BudgetLimitArray(BaseModel):
    data: List[BudgetLimitRead]
    meta: Meta


class ConfigurationArray(RootModel[List[Configuration]]):
    root: List[Configuration]


class CurrencyArray(BaseModel):
    data: List[CurrencyRead]
    meta: Meta
    links: PageLink


class CurrencyExchangeRateArray(BaseModel):
    data: List[CurrencyExchangeRateRead]
    meta: Meta
    links: PageLink


class LinkTypeArray(BaseModel):
    data: List[LinkTypeRead]
    meta: Meta
    links: PageLink


class ObjectGroupArray(BaseModel):
    data: List[ObjectGroupRead]
    meta: Meta


class PiggyBankEventArray(BaseModel):
    data: List[PiggyBankEventRead]
    meta: Meta
    links: PageLink


class RuleGroupArray(BaseModel):
    data: List[RuleGroupRead]
    meta: Meta
    links: PageLink


class TagArray(BaseModel):
    data: List[TagRead]
    meta: Meta
    links: PageLink


class TransactionLinkArray(BaseModel):
    data: List[TransactionLinkRead]
    meta: Meta
    links: PageLink


class WebhookAttemptArray(BaseModel):
    data: List[WebhookAttemptRead]
    meta: Meta


class WebhookMessageArray(BaseModel):
    data: List[WebhookMessageRead]
    meta: Meta


class AccountRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['accounts'])
    id: str = Field(..., examples=['2'])
    attributes: Account


class AccountSingle(BaseModel):
    data: AccountRead


class AttachmentRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['attachments'])
    id: str = Field(..., examples=['2'])
    attributes: Attachment
    links: ObjectLink


class AttachmentSingle(BaseModel):
    data: AttachmentRead


class AvailableBudgetRead(BaseModel):
    type: str = Field(
        ..., description='Immutable value', examples=['available_budgets']
    )
    id: str = Field(..., examples=['2'])
    attributes: AvailableBudget


class AvailableBudgetSingle(BaseModel):
    data: AvailableBudgetRead


class BillRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['bills'])
    id: str = Field(..., examples=['2'])
    attributes: Bill


class BillSingle(BaseModel):
    data: BillRead


class BudgetRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['budgets'])
    id: str = Field(..., examples=['2'])
    attributes: Budget


class BudgetSingle(BaseModel):
    data: BudgetRead


class CategoryRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['categories'])
    id: str = Field(..., examples=['2'])
    attributes: Category


class CategorySingle(BaseModel):
    data: CategoryRead


class ConfigurationSingle(BaseModel):
    data: Configuration


class PiggyBankRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['piggy_banks'])
    id: str = Field(..., examples=['2'])
    attributes: PiggyBank
    links: ObjectLink


class PiggyBankSingle(BaseModel):
    data: PiggyBankRead


class UserRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['users'])
    id: str = Field(..., examples=['2'])
    attributes: User
    links: ObjectLink


class WebhookRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['webhooks'])
    id: str = Field(..., examples=['2'])
    attributes: Webhook
    links: ObjectLink


class WebhookSingle(BaseModel):
    data: WebhookRead


class Preference(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    name: str = Field(..., examples=['currencyPreference'])
    data: PolymorphicProperty


class PreferenceUpdate(BaseModel):
    data: PolymorphicProperty


class Recurrence(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    type: Optional[RecurrenceTransactionType] = None
    title: Optional[str] = Field(None, examples=['Rent'])
    description: Optional[str] = Field(
        None,
        description='Not to be confused with the description of the actual transaction(s) being created.',
        examples=['Recurring transaction for the monthly rent'],
    )
    first_date: Optional[date_aliased] = Field(
        None,
        description='First time the recurring transaction will fire. Must be after today.',
        examples=['2018-09-17'],
    )
    latest_date: Optional[date_aliased] = Field(
        None,
        description='Last time the recurring transaction has fired.',
        examples=['2018-09-17'],
    )
    repeat_until: Optional[date_aliased] = Field(
        None,
        description='Date until the recurring transaction can fire. Use either this field or repetitions.',
        examples=['2018-09-17'],
    )
    nr_of_repetitions: Optional[int] = Field(
        None,
        description='Max number of created transactions. Use either this field or repeat_until.',
        examples=[5],
    )
    apply_rules: Optional[bool] = Field(
        None,
        description='Whether or not to fire the rules after the creation of a transaction.',
        examples=[True],
    )
    active: Optional[bool] = Field(
        None, description='If the recurrence is even active.', examples=[True]
    )
    notes: Optional[str] = Field(None, examples=['Some notes'])
    repetitions: Optional[List[RecurrenceRepetition]] = None
    transactions: Optional[List[RecurrenceTransaction]] = None


class RecurrenceStore(BaseModel):
    type: RecurrenceTransactionType
    title: str = Field(..., examples=['Rent'])
    description: Optional[str] = Field(
        None,
        description='Not to be confused with the description of the actual transaction(s) being created.',
        examples=['Recurring transaction for the monthly rent'],
    )
    first_date: date_aliased = Field(
        ...,
        description='First time the recurring transaction will fire. Must be after today.',
        examples=['2018-09-17'],
    )
    repeat_until: date_aliased = Field(
        ...,
        description='Date until the recurring transaction can fire. Use either this field or repetitions.',
        examples=['2018-09-17'],
    )
    nr_of_repetitions: Optional[int] = Field(
        None,
        description='Max number of created transactions. Use either this field or repeat_until.',
        examples=[5],
    )
    apply_rules: Optional[bool] = Field(
        None,
        description='Whether or not to fire the rules after the creation of a transaction.',
        examples=[True],
    )
    active: Optional[bool] = Field(
        None, description='If the recurrence is even active.', examples=[True]
    )
    notes: Optional[str] = Field(None, examples=['Some notes'])
    repetitions: List[RecurrenceRepetitionStore]
    transactions: List[RecurrenceTransactionStore]


class RecurrenceUpdate(BaseModel):
    title: Optional[str] = Field(None, examples=['Rent'])
    description: Optional[str] = Field(
        None,
        description='Not to be confused with the description of the actual transaction(s) being created.',
        examples=['Recurring transaction for the monthly rent'],
    )
    first_date: Optional[date_aliased] = Field(
        None,
        description='First time the recurring transaction will fire.',
        examples=['2018-09-17'],
    )
    repeat_until: Optional[date_aliased] = Field(
        None,
        description="Date until the recurring transaction can fire. After that date, it's basically inactive. Use either this field or repetitions.",
        examples=['2018-09-17'],
    )
    nr_of_repetitions: Optional[int] = Field(
        None,
        description='Max number of created transactions. Use either this field or repeat_until.',
        examples=[5],
    )
    apply_rules: Optional[bool] = Field(
        None,
        description='Whether or not to fire the rules after the creation of a transaction.',
        examples=[True],
    )
    active: Optional[bool] = Field(
        None, description='If the recurrence is even active.', examples=[True]
    )
    notes: Optional[str] = Field(None, examples=['Some notes'])
    repetitions: Optional[List[RecurrenceRepetitionUpdate]] = None
    transactions: Optional[List[RecurrenceTransactionUpdate]] = None


class Rule(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    title: str = Field(..., examples=['First rule title.'])
    description: Optional[str] = Field(None, examples=['First rule description'])
    rule_group_id: str = Field(
        ...,
        description='ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory.',
        examples=['81'],
    )
    rule_group_title: Optional[str] = Field(
        None,
        description='Title of the rule group under which the rule must be stored. Either this field or rule_group_id is mandatory.',
        examples=['New rule group'],
    )
    order: Optional[int] = Field(None, examples=[5])
    trigger: RuleTriggerType
    active: Optional[bool] = Field(
        True,
        description='Whether or not the rule is even active. Default is true.',
        examples=[True],
    )
    strict: Optional[bool] = Field(
        None,
        description='If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.',
        examples=[True],
    )
    stop_processing: Optional[bool] = Field(
        False,
        description='If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false.',
        examples=[False],
    )
    triggers: List[RuleTrigger]
    actions: List[RuleAction]


class RuleStore(BaseModel):
    title: str = Field(..., examples=['First rule title.'])
    description: Optional[str] = Field(None, examples=['First rule description'])
    rule_group_id: str = Field(
        ...,
        description='ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory.',
        examples=['81'],
    )
    rule_group_title: Optional[str] = Field(
        None,
        description='Title of the rule group under which the rule must be stored. Either this field or rule_group_id is mandatory.',
        examples=['New rule group'],
    )
    order: Optional[int] = Field(None, examples=[5])
    trigger: RuleTriggerType
    active: Optional[bool] = Field(
        True,
        description='Whether or not the rule is even active. Default is true.',
        examples=[True],
    )
    strict: Optional[bool] = Field(
        True,
        description='If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.',
        examples=[True],
    )
    stop_processing: Optional[bool] = Field(
        None,
        description='If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false.',
        examples=[False],
    )
    triggers: List[RuleTriggerStore]
    actions: List[RuleActionStore]


class RuleUpdate(BaseModel):
    title: Optional[str] = Field(None, examples=['First rule title.'])
    description: Optional[str] = Field(None, examples=['First rule description'])
    rule_group_id: Optional[str] = Field(
        None,
        description='ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory.',
        examples=['81'],
    )
    order: Optional[int] = Field(None, examples=[5])
    trigger: Optional[RuleTriggerType] = None
    active: Optional[bool] = Field(
        True,
        description='Whether or not the rule is even active. Default is true.',
        examples=[True],
    )
    strict: Optional[bool] = Field(
        None,
        description='If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.',
        examples=[True],
    )
    stop_processing: Optional[bool] = Field(
        False,
        description='If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false.',
        examples=[False],
    )
    triggers: Optional[List[RuleTriggerUpdate]] = None
    actions: Optional[List[RuleActionUpdate]] = None


class Transaction(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    user: Optional[str] = Field(None, description='User ID', examples=['3'])
    group_title: Optional[str] = Field(
        None,
        description='Title of the transaction if it has been split in more than one piece. Empty otherwise.',
        examples=['Split transaction title.'],
    )
    transactions: List[TransactionSplit]


class TransactionStore(BaseModel):
    error_if_duplicate_hash: Optional[bool] = Field(
        None,
        description='Break if the submitted transaction exists already.',
        examples=[False],
    )
    apply_rules: Optional[bool] = Field(
        None,
        description='Whether or not to apply rules when submitting transaction.',
        examples=[False],
    )
    fire_webhooks: Optional[bool] = Field(
        True,
        description='Whether or not to fire the webhooks that are related to this event.',
        examples=[True],
    )
    group_title: Optional[str] = Field(
        None,
        description='Title of the transaction if it has been split in more than one piece. Empty otherwise.',
        examples=['Split transaction title.'],
    )
    transactions: List[TransactionSplitStore]


class TransactionUpdate(BaseModel):
    apply_rules: Optional[bool] = Field(
        None,
        description='Whether or not to apply rules when submitting transaction.',
        examples=[False],
    )
    fire_webhooks: Optional[bool] = Field(
        True,
        description='Whether or not to fire the webhooks that are related to this event.',
        examples=[True],
    )
    group_title: Optional[str] = Field(
        None,
        description='Title of the transaction if it has been split in more than one piece. Empty otherwise.',
        examples=['Split transaction title.'],
    )
    transactions: Optional[List[TransactionSplitUpdate]] = None


class UserGroupReadAttributes(BaseModel):
    created_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    updated_at: Optional[datetime] = Field(None, examples=['2018-09-17T12:46:47+01:00'])
    in_use: Optional[bool] = Field(
        None,
        description="Is this user group ('financial administration') currently the active administration?",
        examples=[False],
    )
    can_see_members: Optional[bool] = Field(
        None,
        description='Can the current user see the members of this user group?',
        examples=[True],
    )
    title: Optional[str] = Field(
        None,
        description="Title of the user group. By default, it is the same as the user's email address.",
        examples=['demo@firefly'],
    )
    native_currency_id: Optional[str] = Field(
        None,
        description='Returns the native currency ID of the user group.',
        examples=['12'],
    )
    native_currency_code: Optional[str] = Field(
        None,
        description='Returns the native currency code of the user group.',
        examples=['EUR'],
    )
    native_currency_symbol: Optional[str] = Field(
        None,
        description='Returns the native currency symbol of the user group.',
        examples=['$'],
    )
    native_currency_decimal_places: Optional[int] = Field(
        None,
        description='Returns the native currency decimal places of the user group.',
        examples=[2],
    )
    members: Optional[List[UserGroupReadMembers]] = None


class UserSingle(BaseModel):
    data: UserRead


class AccountArray(BaseModel):
    data: List[AccountRead]
    meta: Meta


class AttachmentArray(BaseModel):
    data: List[AttachmentRead]
    meta: Meta


class AvailableBudgetArray(BaseModel):
    data: List[AvailableBudgetRead]
    meta: Meta


class BillArray(BaseModel):
    data: List[BillRead]
    meta: Meta


class BudgetArray(BaseModel):
    data: List[BudgetRead]
    meta: Meta


class CategoryArray(BaseModel):
    data: List[CategoryRead]
    meta: Meta


class PiggyBankArray(BaseModel):
    data: List[PiggyBankRead]
    meta: Meta
    links: PageLink


class UserArray(BaseModel):
    data: List[UserRead]
    meta: Meta
    links: PageLink


class WebhookArray(BaseModel):
    data: List[WebhookRead]
    meta: Meta
    links: PageLink


class PreferenceRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['preferences'])
    id: str = Field(..., examples=['2'])
    attributes: Preference


class PreferenceSingle(BaseModel):
    data: PreferenceRead


class RecurrenceRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['recurrences'])
    id: str = Field(..., examples=['2'])
    attributes: Recurrence
    links: ObjectLink


class RecurrenceSingle(BaseModel):
    data: RecurrenceRead


class RuleRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['rules'])
    id: str = Field(..., examples=['2'])
    attributes: Rule
    links: ObjectLink


class RuleSingle(BaseModel):
    data: RuleRead


class TransactionRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['transactions'])
    id: str = Field(..., examples=['2'])
    attributes: Transaction
    links: ObjectLink


class TransactionSingle(BaseModel):
    data: TransactionRead


class UserGroupRead(BaseModel):
    type: str = Field(..., description='Immutable value', examples=['user_groups'])
    id: str = Field(..., examples=['2'])
    attributes: UserGroupReadAttributes
    links: ObjectLink


class UserGroupSingle(BaseModel):
    data: UserGroupRead


class PreferenceArray(BaseModel):
    data: List[PreferenceRead]
    meta: Meta
    links: PageLink


class RecurrenceArray(BaseModel):
    data: List[RecurrenceRead]
    meta: Meta
    links: PageLink


class RuleArray(BaseModel):
    data: List[RuleRead]
    meta: Meta
    links: PageLink


class TransactionArray(BaseModel):
    data: List[TransactionRead]
    meta: Meta
    links: PageLink


class UserGroupArray(BaseModel):
    data: List[UserGroupRead]
    meta: Meta
    links: PageLink
